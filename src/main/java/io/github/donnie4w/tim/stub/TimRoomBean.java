/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package io.github.donnie4w.tim.stub;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.18.1)", date = "2023-12-03")
public class TimRoomBean implements org.apache.thrift.TBase<TimRoomBean, TimRoomBean._Fields>, java.io.Serializable, Cloneable, Comparable<TimRoomBean> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TimRoomBean");

  private static final org.apache.thrift.protocol.TField FOUNDER_FIELD_DESC = new org.apache.thrift.protocol.TField("founder", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField MANAGERS_FIELD_DESC = new org.apache.thrift.protocol.TField("managers", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField COVER_FIELD_DESC = new org.apache.thrift.protocol.TField("cover", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField TOPIC_FIELD_DESC = new org.apache.thrift.protocol.TField("topic", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField LABEL_FIELD_DESC = new org.apache.thrift.protocol.TField("label", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField GTYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("gtype", org.apache.thrift.protocol.TType.BYTE, (short)6);
  private static final org.apache.thrift.protocol.TField CREATETIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createtime", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField EXTEND_FIELD_DESC = new org.apache.thrift.protocol.TField("extend", org.apache.thrift.protocol.TType.MAP, (short)8);
  private static final org.apache.thrift.protocol.TField EXTRA_FIELD_DESC = new org.apache.thrift.protocol.TField("extra", org.apache.thrift.protocol.TType.MAP, (short)9);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TimRoomBeanStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TimRoomBeanTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String founder; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> managers; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String cover; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String topic; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String label; // optional
  public byte gtype; // optional
  public long createtime; // optional
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> extend; // optional
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.nio.ByteBuffer> extra; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    FOUNDER((short)1, "founder"),
    MANAGERS((short)2, "managers"),
    COVER((short)3, "cover"),
    TOPIC((short)4, "topic"),
    LABEL((short)5, "label"),
    GTYPE((short)6, "gtype"),
    CREATETIME((short)7, "createtime"),
    EXTEND((short)8, "extend"),
    EXTRA((short)9, "extra");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FOUNDER
          return FOUNDER;
        case 2: // MANAGERS
          return MANAGERS;
        case 3: // COVER
          return COVER;
        case 4: // TOPIC
          return TOPIC;
        case 5: // LABEL
          return LABEL;
        case 6: // GTYPE
          return GTYPE;
        case 7: // CREATETIME
          return CREATETIME;
        case 8: // EXTEND
          return EXTEND;
        case 9: // EXTRA
          return EXTRA;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __GTYPE_ISSET_ID = 0;
  private static final int __CREATETIME_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.FOUNDER,_Fields.MANAGERS,_Fields.COVER,_Fields.TOPIC,_Fields.LABEL,_Fields.GTYPE,_Fields.CREATETIME,_Fields.EXTEND,_Fields.EXTRA};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FOUNDER, new org.apache.thrift.meta_data.FieldMetaData("founder", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MANAGERS, new org.apache.thrift.meta_data.FieldMetaData("managers", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.COVER, new org.apache.thrift.meta_data.FieldMetaData("cover", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TOPIC, new org.apache.thrift.meta_data.FieldMetaData("topic", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LABEL, new org.apache.thrift.meta_data.FieldMetaData("label", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GTYPE, new org.apache.thrift.meta_data.FieldMetaData("gtype", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.CREATETIME, new org.apache.thrift.meta_data.FieldMetaData("createtime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.EXTEND, new org.apache.thrift.meta_data.FieldMetaData("extend", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.EXTRA, new org.apache.thrift.meta_data.FieldMetaData("extra", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING            , true))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TimRoomBean.class, metaDataMap);
  }

  public TimRoomBean() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TimRoomBean(TimRoomBean other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetFounder()) {
      this.founder = other.founder;
    }
    if (other.isSetManagers()) {
      java.util.List<java.lang.String> __this__managers = new java.util.ArrayList<java.lang.String>(other.managers);
      this.managers = __this__managers;
    }
    if (other.isSetCover()) {
      this.cover = other.cover;
    }
    if (other.isSetTopic()) {
      this.topic = other.topic;
    }
    if (other.isSetLabel()) {
      this.label = other.label;
    }
    this.gtype = other.gtype;
    this.createtime = other.createtime;
    if (other.isSetExtend()) {
      java.util.Map<java.lang.String,java.lang.String> __this__extend = new java.util.HashMap<java.lang.String,java.lang.String>(other.extend);
      this.extend = __this__extend;
    }
    if (other.isSetExtra()) {
      java.util.Map<java.lang.String,java.nio.ByteBuffer> __this__extra = new java.util.HashMap<java.lang.String,java.nio.ByteBuffer>(other.extra);
      this.extra = __this__extra;
    }
  }

  @Override
  public TimRoomBean deepCopy() {
    return new TimRoomBean(this);
  }

  @Override
  public void clear() {
    this.founder = null;
    this.managers = null;
    this.cover = null;
    this.topic = null;
    this.label = null;
    setGtypeIsSet(false);
    this.gtype = 0;
    setCreatetimeIsSet(false);
    this.createtime = 0;
    this.extend = null;
    this.extra = null;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getFounder() {
    return this.founder;
  }

  public TimRoomBean setFounder(@org.apache.thrift.annotation.Nullable java.lang.String founder) {
    this.founder = founder;
    return this;
  }

  public void unsetFounder() {
    this.founder = null;
  }

  /** Returns true if field founder is set (has been assigned a value) and false otherwise */
  public boolean isSetFounder() {
    return this.founder != null;
  }

  public void setFounderIsSet(boolean value) {
    if (!value) {
      this.founder = null;
    }
  }

  public int getManagersSize() {
    return (this.managers == null) ? 0 : this.managers.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.String> getManagersIterator() {
    return (this.managers == null) ? null : this.managers.iterator();
  }

  public void addToManagers(java.lang.String elem) {
    if (this.managers == null) {
      this.managers = new java.util.ArrayList<java.lang.String>();
    }
    this.managers.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.String> getManagers() {
    return this.managers;
  }

  public TimRoomBean setManagers(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> managers) {
    this.managers = managers;
    return this;
  }

  public void unsetManagers() {
    this.managers = null;
  }

  /** Returns true if field managers is set (has been assigned a value) and false otherwise */
  public boolean isSetManagers() {
    return this.managers != null;
  }

  public void setManagersIsSet(boolean value) {
    if (!value) {
      this.managers = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getCover() {
    return this.cover;
  }

  public TimRoomBean setCover(@org.apache.thrift.annotation.Nullable java.lang.String cover) {
    this.cover = cover;
    return this;
  }

  public void unsetCover() {
    this.cover = null;
  }

  /** Returns true if field cover is set (has been assigned a value) and false otherwise */
  public boolean isSetCover() {
    return this.cover != null;
  }

  public void setCoverIsSet(boolean value) {
    if (!value) {
      this.cover = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getTopic() {
    return this.topic;
  }

  public TimRoomBean setTopic(@org.apache.thrift.annotation.Nullable java.lang.String topic) {
    this.topic = topic;
    return this;
  }

  public void unsetTopic() {
    this.topic = null;
  }

  /** Returns true if field topic is set (has been assigned a value) and false otherwise */
  public boolean isSetTopic() {
    return this.topic != null;
  }

  public void setTopicIsSet(boolean value) {
    if (!value) {
      this.topic = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getLabel() {
    return this.label;
  }

  public TimRoomBean setLabel(@org.apache.thrift.annotation.Nullable java.lang.String label) {
    this.label = label;
    return this;
  }

  public void unsetLabel() {
    this.label = null;
  }

  /** Returns true if field label is set (has been assigned a value) and false otherwise */
  public boolean isSetLabel() {
    return this.label != null;
  }

  public void setLabelIsSet(boolean value) {
    if (!value) {
      this.label = null;
    }
  }

  public byte getGtype() {
    return this.gtype;
  }

  public TimRoomBean setGtype(byte gtype) {
    this.gtype = gtype;
    setGtypeIsSet(true);
    return this;
  }

  public void unsetGtype() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __GTYPE_ISSET_ID);
  }

  /** Returns true if field gtype is set (has been assigned a value) and false otherwise */
  public boolean isSetGtype() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __GTYPE_ISSET_ID);
  }

  public void setGtypeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __GTYPE_ISSET_ID, value);
  }

  public long getCreatetime() {
    return this.createtime;
  }

  public TimRoomBean setCreatetime(long createtime) {
    this.createtime = createtime;
    setCreatetimeIsSet(true);
    return this;
  }

  public void unsetCreatetime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  /** Returns true if field createtime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreatetime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  public void setCreatetimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CREATETIME_ISSET_ID, value);
  }

  public int getExtendSize() {
    return (this.extend == null) ? 0 : this.extend.size();
  }

  public void putToExtend(java.lang.String key, java.lang.String val) {
    if (this.extend == null) {
      this.extend = new java.util.HashMap<java.lang.String,java.lang.String>();
    }
    this.extend.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.String,java.lang.String> getExtend() {
    return this.extend;
  }

  public TimRoomBean setExtend(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> extend) {
    this.extend = extend;
    return this;
  }

  public void unsetExtend() {
    this.extend = null;
  }

  /** Returns true if field extend is set (has been assigned a value) and false otherwise */
  public boolean isSetExtend() {
    return this.extend != null;
  }

  public void setExtendIsSet(boolean value) {
    if (!value) {
      this.extend = null;
    }
  }

  public int getExtraSize() {
    return (this.extra == null) ? 0 : this.extra.size();
  }

  public void putToExtra(java.lang.String key, java.nio.ByteBuffer val) {
    if (this.extra == null) {
      this.extra = new java.util.HashMap<java.lang.String,java.nio.ByteBuffer>();
    }
    this.extra.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.String,java.nio.ByteBuffer> getExtra() {
    return this.extra;
  }

  public TimRoomBean setExtra(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.nio.ByteBuffer> extra) {
    this.extra = extra;
    return this;
  }

  public void unsetExtra() {
    this.extra = null;
  }

  /** Returns true if field extra is set (has been assigned a value) and false otherwise */
  public boolean isSetExtra() {
    return this.extra != null;
  }

  public void setExtraIsSet(boolean value) {
    if (!value) {
      this.extra = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case FOUNDER:
      if (value == null) {
        unsetFounder();
      } else {
        setFounder((java.lang.String)value);
      }
      break;

    case MANAGERS:
      if (value == null) {
        unsetManagers();
      } else {
        setManagers((java.util.List<java.lang.String>)value);
      }
      break;

    case COVER:
      if (value == null) {
        unsetCover();
      } else {
        setCover((java.lang.String)value);
      }
      break;

    case TOPIC:
      if (value == null) {
        unsetTopic();
      } else {
        setTopic((java.lang.String)value);
      }
      break;

    case LABEL:
      if (value == null) {
        unsetLabel();
      } else {
        setLabel((java.lang.String)value);
      }
      break;

    case GTYPE:
      if (value == null) {
        unsetGtype();
      } else {
        setGtype((java.lang.Byte)value);
      }
      break;

    case CREATETIME:
      if (value == null) {
        unsetCreatetime();
      } else {
        setCreatetime((java.lang.Long)value);
      }
      break;

    case EXTEND:
      if (value == null) {
        unsetExtend();
      } else {
        setExtend((java.util.Map<java.lang.String,java.lang.String>)value);
      }
      break;

    case EXTRA:
      if (value == null) {
        unsetExtra();
      } else {
        setExtra((java.util.Map<java.lang.String,java.nio.ByteBuffer>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case FOUNDER:
      return getFounder();

    case MANAGERS:
      return getManagers();

    case COVER:
      return getCover();

    case TOPIC:
      return getTopic();

    case LABEL:
      return getLabel();

    case GTYPE:
      return getGtype();

    case CREATETIME:
      return getCreatetime();

    case EXTEND:
      return getExtend();

    case EXTRA:
      return getExtra();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case FOUNDER:
      return isSetFounder();
    case MANAGERS:
      return isSetManagers();
    case COVER:
      return isSetCover();
    case TOPIC:
      return isSetTopic();
    case LABEL:
      return isSetLabel();
    case GTYPE:
      return isSetGtype();
    case CREATETIME:
      return isSetCreatetime();
    case EXTEND:
      return isSetExtend();
    case EXTRA:
      return isSetExtra();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TimRoomBean)
      return this.equals((TimRoomBean)that);
    return false;
  }

  public boolean equals(TimRoomBean that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_founder = true && this.isSetFounder();
    boolean that_present_founder = true && that.isSetFounder();
    if (this_present_founder || that_present_founder) {
      if (!(this_present_founder && that_present_founder))
        return false;
      if (!this.founder.equals(that.founder))
        return false;
    }

    boolean this_present_managers = true && this.isSetManagers();
    boolean that_present_managers = true && that.isSetManagers();
    if (this_present_managers || that_present_managers) {
      if (!(this_present_managers && that_present_managers))
        return false;
      if (!this.managers.equals(that.managers))
        return false;
    }

    boolean this_present_cover = true && this.isSetCover();
    boolean that_present_cover = true && that.isSetCover();
    if (this_present_cover || that_present_cover) {
      if (!(this_present_cover && that_present_cover))
        return false;
      if (!this.cover.equals(that.cover))
        return false;
    }

    boolean this_present_topic = true && this.isSetTopic();
    boolean that_present_topic = true && that.isSetTopic();
    if (this_present_topic || that_present_topic) {
      if (!(this_present_topic && that_present_topic))
        return false;
      if (!this.topic.equals(that.topic))
        return false;
    }

    boolean this_present_label = true && this.isSetLabel();
    boolean that_present_label = true && that.isSetLabel();
    if (this_present_label || that_present_label) {
      if (!(this_present_label && that_present_label))
        return false;
      if (!this.label.equals(that.label))
        return false;
    }

    boolean this_present_gtype = true && this.isSetGtype();
    boolean that_present_gtype = true && that.isSetGtype();
    if (this_present_gtype || that_present_gtype) {
      if (!(this_present_gtype && that_present_gtype))
        return false;
      if (this.gtype != that.gtype)
        return false;
    }

    boolean this_present_createtime = true && this.isSetCreatetime();
    boolean that_present_createtime = true && that.isSetCreatetime();
    if (this_present_createtime || that_present_createtime) {
      if (!(this_present_createtime && that_present_createtime))
        return false;
      if (this.createtime != that.createtime)
        return false;
    }

    boolean this_present_extend = true && this.isSetExtend();
    boolean that_present_extend = true && that.isSetExtend();
    if (this_present_extend || that_present_extend) {
      if (!(this_present_extend && that_present_extend))
        return false;
      if (!this.extend.equals(that.extend))
        return false;
    }

    boolean this_present_extra = true && this.isSetExtra();
    boolean that_present_extra = true && that.isSetExtra();
    if (this_present_extra || that_present_extra) {
      if (!(this_present_extra && that_present_extra))
        return false;
      if (!this.extra.equals(that.extra))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetFounder()) ? 131071 : 524287);
    if (isSetFounder())
      hashCode = hashCode * 8191 + founder.hashCode();

    hashCode = hashCode * 8191 + ((isSetManagers()) ? 131071 : 524287);
    if (isSetManagers())
      hashCode = hashCode * 8191 + managers.hashCode();

    hashCode = hashCode * 8191 + ((isSetCover()) ? 131071 : 524287);
    if (isSetCover())
      hashCode = hashCode * 8191 + cover.hashCode();

    hashCode = hashCode * 8191 + ((isSetTopic()) ? 131071 : 524287);
    if (isSetTopic())
      hashCode = hashCode * 8191 + topic.hashCode();

    hashCode = hashCode * 8191 + ((isSetLabel()) ? 131071 : 524287);
    if (isSetLabel())
      hashCode = hashCode * 8191 + label.hashCode();

    hashCode = hashCode * 8191 + ((isSetGtype()) ? 131071 : 524287);
    if (isSetGtype())
      hashCode = hashCode * 8191 + (int) (gtype);

    hashCode = hashCode * 8191 + ((isSetCreatetime()) ? 131071 : 524287);
    if (isSetCreatetime())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(createtime);

    hashCode = hashCode * 8191 + ((isSetExtend()) ? 131071 : 524287);
    if (isSetExtend())
      hashCode = hashCode * 8191 + extend.hashCode();

    hashCode = hashCode * 8191 + ((isSetExtra()) ? 131071 : 524287);
    if (isSetExtra())
      hashCode = hashCode * 8191 + extra.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TimRoomBean other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetFounder(), other.isSetFounder());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFounder()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.founder, other.founder);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetManagers(), other.isSetManagers());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetManagers()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.managers, other.managers);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCover(), other.isSetCover());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCover()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cover, other.cover);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTopic(), other.isSetTopic());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTopic()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topic, other.topic);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetLabel(), other.isSetLabel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLabel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.label, other.label);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetGtype(), other.isSetGtype());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGtype()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gtype, other.gtype);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCreatetime(), other.isSetCreatetime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreatetime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createtime, other.createtime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetExtend(), other.isSetExtend());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExtend()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extend, other.extend);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetExtra(), other.isSetExtra());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExtra()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extra, other.extra);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TimRoomBean(");
    boolean first = true;

    if (isSetFounder()) {
      sb.append("founder:");
      if (this.founder == null) {
        sb.append("null");
      } else {
        sb.append(this.founder);
      }
      first = false;
    }
    if (isSetManagers()) {
      if (!first) sb.append(", ");
      sb.append("managers:");
      if (this.managers == null) {
        sb.append("null");
      } else {
        sb.append(this.managers);
      }
      first = false;
    }
    if (isSetCover()) {
      if (!first) sb.append(", ");
      sb.append("cover:");
      if (this.cover == null) {
        sb.append("null");
      } else {
        sb.append(this.cover);
      }
      first = false;
    }
    if (isSetTopic()) {
      if (!first) sb.append(", ");
      sb.append("topic:");
      if (this.topic == null) {
        sb.append("null");
      } else {
        sb.append(this.topic);
      }
      first = false;
    }
    if (isSetLabel()) {
      if (!first) sb.append(", ");
      sb.append("label:");
      if (this.label == null) {
        sb.append("null");
      } else {
        sb.append(this.label);
      }
      first = false;
    }
    if (isSetGtype()) {
      if (!first) sb.append(", ");
      sb.append("gtype:");
      sb.append(this.gtype);
      first = false;
    }
    if (isSetCreatetime()) {
      if (!first) sb.append(", ");
      sb.append("createtime:");
      sb.append(this.createtime);
      first = false;
    }
    if (isSetExtend()) {
      if (!first) sb.append(", ");
      sb.append("extend:");
      if (this.extend == null) {
        sb.append("null");
      } else {
        sb.append(this.extend);
      }
      first = false;
    }
    if (isSetExtra()) {
      if (!first) sb.append(", ");
      sb.append("extra:");
      if (this.extra == null) {
        sb.append("null");
      } else {
        sb.append(this.extra);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TimRoomBeanStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TimRoomBeanStandardScheme getScheme() {
      return new TimRoomBeanStandardScheme();
    }
  }

  private static class TimRoomBeanStandardScheme extends org.apache.thrift.scheme.StandardScheme<TimRoomBean> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TimRoomBean struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FOUNDER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.founder = iprot.readString();
              struct.setFounderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MANAGERS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list38 = iprot.readListBegin();
                struct.managers = new java.util.ArrayList<java.lang.String>(_list38.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _elem39;
                for (int _i40 = 0; _i40 < _list38.size; ++_i40)
                {
                  _elem39 = iprot.readString();
                  struct.managers.add(_elem39);
                }
                iprot.readListEnd();
              }
              struct.setManagersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // COVER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cover = iprot.readString();
              struct.setCoverIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TOPIC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.topic = iprot.readString();
              struct.setTopicIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // LABEL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.label = iprot.readString();
              struct.setLabelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // GTYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.gtype = iprot.readByte();
              struct.setGtypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CREATETIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createtime = iprot.readI64();
              struct.setCreatetimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // EXTEND
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map41 = iprot.readMapBegin();
                struct.extend = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map41.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _key42;
                @org.apache.thrift.annotation.Nullable java.lang.String _val43;
                for (int _i44 = 0; _i44 < _map41.size; ++_i44)
                {
                  _key42 = iprot.readString();
                  _val43 = iprot.readString();
                  struct.extend.put(_key42, _val43);
                }
                iprot.readMapEnd();
              }
              struct.setExtendIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // EXTRA
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map45 = iprot.readMapBegin();
                struct.extra = new java.util.HashMap<java.lang.String,java.nio.ByteBuffer>(2*_map45.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _key46;
                @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer _val47;
                for (int _i48 = 0; _i48 < _map45.size; ++_i48)
                {
                  _key46 = iprot.readString();
                  _val47 = iprot.readBinary();
                  struct.extra.put(_key46, _val47);
                }
                iprot.readMapEnd();
              }
              struct.setExtraIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TimRoomBean struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.founder != null) {
        if (struct.isSetFounder()) {
          oprot.writeFieldBegin(FOUNDER_FIELD_DESC);
          oprot.writeString(struct.founder);
          oprot.writeFieldEnd();
        }
      }
      if (struct.managers != null) {
        if (struct.isSetManagers()) {
          oprot.writeFieldBegin(MANAGERS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.managers.size()));
            for (java.lang.String _iter49 : struct.managers)
            {
              oprot.writeString(_iter49);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.cover != null) {
        if (struct.isSetCover()) {
          oprot.writeFieldBegin(COVER_FIELD_DESC);
          oprot.writeString(struct.cover);
          oprot.writeFieldEnd();
        }
      }
      if (struct.topic != null) {
        if (struct.isSetTopic()) {
          oprot.writeFieldBegin(TOPIC_FIELD_DESC);
          oprot.writeString(struct.topic);
          oprot.writeFieldEnd();
        }
      }
      if (struct.label != null) {
        if (struct.isSetLabel()) {
          oprot.writeFieldBegin(LABEL_FIELD_DESC);
          oprot.writeString(struct.label);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetGtype()) {
        oprot.writeFieldBegin(GTYPE_FIELD_DESC);
        oprot.writeByte(struct.gtype);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCreatetime()) {
        oprot.writeFieldBegin(CREATETIME_FIELD_DESC);
        oprot.writeI64(struct.createtime);
        oprot.writeFieldEnd();
      }
      if (struct.extend != null) {
        if (struct.isSetExtend()) {
          oprot.writeFieldBegin(EXTEND_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.extend.size()));
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter50 : struct.extend.entrySet())
            {
              oprot.writeString(_iter50.getKey());
              oprot.writeString(_iter50.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.extra != null) {
        if (struct.isSetExtra()) {
          oprot.writeFieldBegin(EXTRA_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.extra.size()));
            for (java.util.Map.Entry<java.lang.String, java.nio.ByteBuffer> _iter51 : struct.extra.entrySet())
            {
              oprot.writeString(_iter51.getKey());
              oprot.writeBinary(_iter51.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TimRoomBeanTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TimRoomBeanTupleScheme getScheme() {
      return new TimRoomBeanTupleScheme();
    }
  }

  private static class TimRoomBeanTupleScheme extends org.apache.thrift.scheme.TupleScheme<TimRoomBean> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TimRoomBean struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetFounder()) {
        optionals.set(0);
      }
      if (struct.isSetManagers()) {
        optionals.set(1);
      }
      if (struct.isSetCover()) {
        optionals.set(2);
      }
      if (struct.isSetTopic()) {
        optionals.set(3);
      }
      if (struct.isSetLabel()) {
        optionals.set(4);
      }
      if (struct.isSetGtype()) {
        optionals.set(5);
      }
      if (struct.isSetCreatetime()) {
        optionals.set(6);
      }
      if (struct.isSetExtend()) {
        optionals.set(7);
      }
      if (struct.isSetExtra()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetFounder()) {
        oprot.writeString(struct.founder);
      }
      if (struct.isSetManagers()) {
        {
          oprot.writeI32(struct.managers.size());
          for (java.lang.String _iter52 : struct.managers)
          {
            oprot.writeString(_iter52);
          }
        }
      }
      if (struct.isSetCover()) {
        oprot.writeString(struct.cover);
      }
      if (struct.isSetTopic()) {
        oprot.writeString(struct.topic);
      }
      if (struct.isSetLabel()) {
        oprot.writeString(struct.label);
      }
      if (struct.isSetGtype()) {
        oprot.writeByte(struct.gtype);
      }
      if (struct.isSetCreatetime()) {
        oprot.writeI64(struct.createtime);
      }
      if (struct.isSetExtend()) {
        {
          oprot.writeI32(struct.extend.size());
          for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter53 : struct.extend.entrySet())
          {
            oprot.writeString(_iter53.getKey());
            oprot.writeString(_iter53.getValue());
          }
        }
      }
      if (struct.isSetExtra()) {
        {
          oprot.writeI32(struct.extra.size());
          for (java.util.Map.Entry<java.lang.String, java.nio.ByteBuffer> _iter54 : struct.extra.entrySet())
          {
            oprot.writeString(_iter54.getKey());
            oprot.writeBinary(_iter54.getValue());
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TimRoomBean struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.founder = iprot.readString();
        struct.setFounderIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list55 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
          struct.managers = new java.util.ArrayList<java.lang.String>(_list55.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _elem56;
          for (int _i57 = 0; _i57 < _list55.size; ++_i57)
          {
            _elem56 = iprot.readString();
            struct.managers.add(_elem56);
          }
        }
        struct.setManagersIsSet(true);
      }
      if (incoming.get(2)) {
        struct.cover = iprot.readString();
        struct.setCoverIsSet(true);
      }
      if (incoming.get(3)) {
        struct.topic = iprot.readString();
        struct.setTopicIsSet(true);
      }
      if (incoming.get(4)) {
        struct.label = iprot.readString();
        struct.setLabelIsSet(true);
      }
      if (incoming.get(5)) {
        struct.gtype = iprot.readByte();
        struct.setGtypeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.createtime = iprot.readI64();
        struct.setCreatetimeIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TMap _map58 = iprot.readMapBegin(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING); 
          struct.extend = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map58.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _key59;
          @org.apache.thrift.annotation.Nullable java.lang.String _val60;
          for (int _i61 = 0; _i61 < _map58.size; ++_i61)
          {
            _key59 = iprot.readString();
            _val60 = iprot.readString();
            struct.extend.put(_key59, _val60);
          }
        }
        struct.setExtendIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TMap _map62 = iprot.readMapBegin(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING); 
          struct.extra = new java.util.HashMap<java.lang.String,java.nio.ByteBuffer>(2*_map62.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _key63;
          @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer _val64;
          for (int _i65 = 0; _i65 < _map62.size; ++_i65)
          {
            _key63 = iprot.readString();
            _val64 = iprot.readBinary();
            struct.extra.put(_key63, _val64);
          }
        }
        struct.setExtraIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

