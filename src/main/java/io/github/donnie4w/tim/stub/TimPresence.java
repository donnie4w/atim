/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package io.github.donnie4w.tim.stub;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.18.1)", date = "2023-12-03")
public class TimPresence implements org.apache.thrift.TBase<TimPresence, TimPresence._Fields>, java.io.Serializable, Cloneable, Comparable<TimPresence> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TimPresence");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField OFFLINE_FIELD_DESC = new org.apache.thrift.protocol.TField("offline", org.apache.thrift.protocol.TType.BOOL, (short)2);
  private static final org.apache.thrift.protocol.TField SUB_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("subStatus", org.apache.thrift.protocol.TType.BYTE, (short)3);
  private static final org.apache.thrift.protocol.TField FROM_TID_FIELD_DESC = new org.apache.thrift.protocol.TField("fromTid", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField TO_TID_FIELD_DESC = new org.apache.thrift.protocol.TField("toTid", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField TO_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("toList", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField SHOW_FIELD_DESC = new org.apache.thrift.protocol.TField("show", org.apache.thrift.protocol.TType.I16, (short)7);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField EXTEND_FIELD_DESC = new org.apache.thrift.protocol.TField("extend", org.apache.thrift.protocol.TType.MAP, (short)9);
  private static final org.apache.thrift.protocol.TField EXTRA_FIELD_DESC = new org.apache.thrift.protocol.TField("extra", org.apache.thrift.protocol.TType.MAP, (short)10);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TimPresenceStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TimPresenceTupleSchemeFactory();

  public long id; // optional
  public boolean offline; // optional
  public byte subStatus; // optional
  public @org.apache.thrift.annotation.Nullable Tid fromTid; // optional
  public @org.apache.thrift.annotation.Nullable Tid toTid; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> toList; // optional
  public short show; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String status; // optional
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> extend; // optional
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.nio.ByteBuffer> extra; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    OFFLINE((short)2, "offline"),
    SUB_STATUS((short)3, "subStatus"),
    FROM_TID((short)4, "fromTid"),
    TO_TID((short)5, "toTid"),
    TO_LIST((short)6, "toList"),
    SHOW((short)7, "show"),
    STATUS((short)8, "status"),
    EXTEND((short)9, "extend"),
    EXTRA((short)10, "extra");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // OFFLINE
          return OFFLINE;
        case 3: // SUB_STATUS
          return SUB_STATUS;
        case 4: // FROM_TID
          return FROM_TID;
        case 5: // TO_TID
          return TO_TID;
        case 6: // TO_LIST
          return TO_LIST;
        case 7: // SHOW
          return SHOW;
        case 8: // STATUS
          return STATUS;
        case 9: // EXTEND
          return EXTEND;
        case 10: // EXTRA
          return EXTRA;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __OFFLINE_ISSET_ID = 1;
  private static final int __SUBSTATUS_ISSET_ID = 2;
  private static final int __SHOW_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ID,_Fields.OFFLINE,_Fields.SUB_STATUS,_Fields.FROM_TID,_Fields.TO_TID,_Fields.TO_LIST,_Fields.SHOW,_Fields.STATUS,_Fields.EXTEND,_Fields.EXTRA};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.OFFLINE, new org.apache.thrift.meta_data.FieldMetaData("offline", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.SUB_STATUS, new org.apache.thrift.meta_data.FieldMetaData("subStatus", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.FROM_TID, new org.apache.thrift.meta_data.FieldMetaData("fromTid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Tid.class)));
    tmpMap.put(_Fields.TO_TID, new org.apache.thrift.meta_data.FieldMetaData("toTid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Tid.class)));
    tmpMap.put(_Fields.TO_LIST, new org.apache.thrift.meta_data.FieldMetaData("toList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.SHOW, new org.apache.thrift.meta_data.FieldMetaData("show", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXTEND, new org.apache.thrift.meta_data.FieldMetaData("extend", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.EXTRA, new org.apache.thrift.meta_data.FieldMetaData("extra", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING            , true))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TimPresence.class, metaDataMap);
  }

  public TimPresence() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TimPresence(TimPresence other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    this.offline = other.offline;
    this.subStatus = other.subStatus;
    if (other.isSetFromTid()) {
      this.fromTid = new Tid(other.fromTid);
    }
    if (other.isSetToTid()) {
      this.toTid = new Tid(other.toTid);
    }
    if (other.isSetToList()) {
      java.util.List<java.lang.String> __this__toList = new java.util.ArrayList<java.lang.String>(other.toList);
      this.toList = __this__toList;
    }
    this.show = other.show;
    if (other.isSetStatus()) {
      this.status = other.status;
    }
    if (other.isSetExtend()) {
      java.util.Map<java.lang.String,java.lang.String> __this__extend = new java.util.HashMap<java.lang.String,java.lang.String>(other.extend);
      this.extend = __this__extend;
    }
    if (other.isSetExtra()) {
      java.util.Map<java.lang.String,java.nio.ByteBuffer> __this__extra = new java.util.HashMap<java.lang.String,java.nio.ByteBuffer>(other.extra);
      this.extra = __this__extra;
    }
  }

  @Override
  public TimPresence deepCopy() {
    return new TimPresence(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    setOfflineIsSet(false);
    this.offline = false;
    setSubStatusIsSet(false);
    this.subStatus = 0;
    this.fromTid = null;
    this.toTid = null;
    this.toList = null;
    setShowIsSet(false);
    this.show = 0;
    this.status = null;
    this.extend = null;
    this.extra = null;
  }

  public long getId() {
    return this.id;
  }

  public TimPresence setId(long id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public boolean isOffline() {
    return this.offline;
  }

  public TimPresence setOffline(boolean offline) {
    this.offline = offline;
    setOfflineIsSet(true);
    return this;
  }

  public void unsetOffline() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __OFFLINE_ISSET_ID);
  }

  /** Returns true if field offline is set (has been assigned a value) and false otherwise */
  public boolean isSetOffline() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __OFFLINE_ISSET_ID);
  }

  public void setOfflineIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __OFFLINE_ISSET_ID, value);
  }

  public byte getSubStatus() {
    return this.subStatus;
  }

  public TimPresence setSubStatus(byte subStatus) {
    this.subStatus = subStatus;
    setSubStatusIsSet(true);
    return this;
  }

  public void unsetSubStatus() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUBSTATUS_ISSET_ID);
  }

  /** Returns true if field subStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetSubStatus() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUBSTATUS_ISSET_ID);
  }

  public void setSubStatusIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUBSTATUS_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public Tid getFromTid() {
    return this.fromTid;
  }

  public TimPresence setFromTid(@org.apache.thrift.annotation.Nullable Tid fromTid) {
    this.fromTid = fromTid;
    return this;
  }

  public void unsetFromTid() {
    this.fromTid = null;
  }

  /** Returns true if field fromTid is set (has been assigned a value) and false otherwise */
  public boolean isSetFromTid() {
    return this.fromTid != null;
  }

  public void setFromTidIsSet(boolean value) {
    if (!value) {
      this.fromTid = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public Tid getToTid() {
    return this.toTid;
  }

  public TimPresence setToTid(@org.apache.thrift.annotation.Nullable Tid toTid) {
    this.toTid = toTid;
    return this;
  }

  public void unsetToTid() {
    this.toTid = null;
  }

  /** Returns true if field toTid is set (has been assigned a value) and false otherwise */
  public boolean isSetToTid() {
    return this.toTid != null;
  }

  public void setToTidIsSet(boolean value) {
    if (!value) {
      this.toTid = null;
    }
  }

  public int getToListSize() {
    return (this.toList == null) ? 0 : this.toList.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.String> getToListIterator() {
    return (this.toList == null) ? null : this.toList.iterator();
  }

  public void addToToList(java.lang.String elem) {
    if (this.toList == null) {
      this.toList = new java.util.ArrayList<java.lang.String>();
    }
    this.toList.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.String> getToList() {
    return this.toList;
  }

  public TimPresence setToList(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> toList) {
    this.toList = toList;
    return this;
  }

  public void unsetToList() {
    this.toList = null;
  }

  /** Returns true if field toList is set (has been assigned a value) and false otherwise */
  public boolean isSetToList() {
    return this.toList != null;
  }

  public void setToListIsSet(boolean value) {
    if (!value) {
      this.toList = null;
    }
  }

  public short getShow() {
    return this.show;
  }

  public TimPresence setShow(short show) {
    this.show = show;
    setShowIsSet(true);
    return this;
  }

  public void unsetShow() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SHOW_ISSET_ID);
  }

  /** Returns true if field show is set (has been assigned a value) and false otherwise */
  public boolean isSetShow() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SHOW_ISSET_ID);
  }

  public void setShowIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SHOW_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getStatus() {
    return this.status;
  }

  public TimPresence setStatus(@org.apache.thrift.annotation.Nullable java.lang.String status) {
    this.status = status;
    return this;
  }

  public void unsetStatus() {
    this.status = null;
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  public int getExtendSize() {
    return (this.extend == null) ? 0 : this.extend.size();
  }

  public void putToExtend(java.lang.String key, java.lang.String val) {
    if (this.extend == null) {
      this.extend = new java.util.HashMap<java.lang.String,java.lang.String>();
    }
    this.extend.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.String,java.lang.String> getExtend() {
    return this.extend;
  }

  public TimPresence setExtend(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> extend) {
    this.extend = extend;
    return this;
  }

  public void unsetExtend() {
    this.extend = null;
  }

  /** Returns true if field extend is set (has been assigned a value) and false otherwise */
  public boolean isSetExtend() {
    return this.extend != null;
  }

  public void setExtendIsSet(boolean value) {
    if (!value) {
      this.extend = null;
    }
  }

  public int getExtraSize() {
    return (this.extra == null) ? 0 : this.extra.size();
  }

  public void putToExtra(java.lang.String key, java.nio.ByteBuffer val) {
    if (this.extra == null) {
      this.extra = new java.util.HashMap<java.lang.String,java.nio.ByteBuffer>();
    }
    this.extra.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.String,java.nio.ByteBuffer> getExtra() {
    return this.extra;
  }

  public TimPresence setExtra(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.nio.ByteBuffer> extra) {
    this.extra = extra;
    return this;
  }

  public void unsetExtra() {
    this.extra = null;
  }

  /** Returns true if field extra is set (has been assigned a value) and false otherwise */
  public boolean isSetExtra() {
    return this.extra != null;
  }

  public void setExtraIsSet(boolean value) {
    if (!value) {
      this.extra = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((java.lang.Long)value);
      }
      break;

    case OFFLINE:
      if (value == null) {
        unsetOffline();
      } else {
        setOffline((java.lang.Boolean)value);
      }
      break;

    case SUB_STATUS:
      if (value == null) {
        unsetSubStatus();
      } else {
        setSubStatus((java.lang.Byte)value);
      }
      break;

    case FROM_TID:
      if (value == null) {
        unsetFromTid();
      } else {
        setFromTid((Tid)value);
      }
      break;

    case TO_TID:
      if (value == null) {
        unsetToTid();
      } else {
        setToTid((Tid)value);
      }
      break;

    case TO_LIST:
      if (value == null) {
        unsetToList();
      } else {
        setToList((java.util.List<java.lang.String>)value);
      }
      break;

    case SHOW:
      if (value == null) {
        unsetShow();
      } else {
        setShow((java.lang.Short)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((java.lang.String)value);
      }
      break;

    case EXTEND:
      if (value == null) {
        unsetExtend();
      } else {
        setExtend((java.util.Map<java.lang.String,java.lang.String>)value);
      }
      break;

    case EXTRA:
      if (value == null) {
        unsetExtra();
      } else {
        setExtra((java.util.Map<java.lang.String,java.nio.ByteBuffer>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case OFFLINE:
      return isOffline();

    case SUB_STATUS:
      return getSubStatus();

    case FROM_TID:
      return getFromTid();

    case TO_TID:
      return getToTid();

    case TO_LIST:
      return getToList();

    case SHOW:
      return getShow();

    case STATUS:
      return getStatus();

    case EXTEND:
      return getExtend();

    case EXTRA:
      return getExtra();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case OFFLINE:
      return isSetOffline();
    case SUB_STATUS:
      return isSetSubStatus();
    case FROM_TID:
      return isSetFromTid();
    case TO_TID:
      return isSetToTid();
    case TO_LIST:
      return isSetToList();
    case SHOW:
      return isSetShow();
    case STATUS:
      return isSetStatus();
    case EXTEND:
      return isSetExtend();
    case EXTRA:
      return isSetExtra();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TimPresence)
      return this.equals((TimPresence)that);
    return false;
  }

  public boolean equals(TimPresence that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_offline = true && this.isSetOffline();
    boolean that_present_offline = true && that.isSetOffline();
    if (this_present_offline || that_present_offline) {
      if (!(this_present_offline && that_present_offline))
        return false;
      if (this.offline != that.offline)
        return false;
    }

    boolean this_present_subStatus = true && this.isSetSubStatus();
    boolean that_present_subStatus = true && that.isSetSubStatus();
    if (this_present_subStatus || that_present_subStatus) {
      if (!(this_present_subStatus && that_present_subStatus))
        return false;
      if (this.subStatus != that.subStatus)
        return false;
    }

    boolean this_present_fromTid = true && this.isSetFromTid();
    boolean that_present_fromTid = true && that.isSetFromTid();
    if (this_present_fromTid || that_present_fromTid) {
      if (!(this_present_fromTid && that_present_fromTid))
        return false;
      if (!this.fromTid.equals(that.fromTid))
        return false;
    }

    boolean this_present_toTid = true && this.isSetToTid();
    boolean that_present_toTid = true && that.isSetToTid();
    if (this_present_toTid || that_present_toTid) {
      if (!(this_present_toTid && that_present_toTid))
        return false;
      if (!this.toTid.equals(that.toTid))
        return false;
    }

    boolean this_present_toList = true && this.isSetToList();
    boolean that_present_toList = true && that.isSetToList();
    if (this_present_toList || that_present_toList) {
      if (!(this_present_toList && that_present_toList))
        return false;
      if (!this.toList.equals(that.toList))
        return false;
    }

    boolean this_present_show = true && this.isSetShow();
    boolean that_present_show = true && that.isSetShow();
    if (this_present_show || that_present_show) {
      if (!(this_present_show && that_present_show))
        return false;
      if (this.show != that.show)
        return false;
    }

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!this.status.equals(that.status))
        return false;
    }

    boolean this_present_extend = true && this.isSetExtend();
    boolean that_present_extend = true && that.isSetExtend();
    if (this_present_extend || that_present_extend) {
      if (!(this_present_extend && that_present_extend))
        return false;
      if (!this.extend.equals(that.extend))
        return false;
    }

    boolean this_present_extra = true && this.isSetExtra();
    boolean that_present_extra = true && that.isSetExtra();
    if (this_present_extra || that_present_extra) {
      if (!(this_present_extra && that_present_extra))
        return false;
      if (!this.extra.equals(that.extra))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
    if (isSetId())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(id);

    hashCode = hashCode * 8191 + ((isSetOffline()) ? 131071 : 524287);
    if (isSetOffline())
      hashCode = hashCode * 8191 + ((offline) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetSubStatus()) ? 131071 : 524287);
    if (isSetSubStatus())
      hashCode = hashCode * 8191 + (int) (subStatus);

    hashCode = hashCode * 8191 + ((isSetFromTid()) ? 131071 : 524287);
    if (isSetFromTid())
      hashCode = hashCode * 8191 + fromTid.hashCode();

    hashCode = hashCode * 8191 + ((isSetToTid()) ? 131071 : 524287);
    if (isSetToTid())
      hashCode = hashCode * 8191 + toTid.hashCode();

    hashCode = hashCode * 8191 + ((isSetToList()) ? 131071 : 524287);
    if (isSetToList())
      hashCode = hashCode * 8191 + toList.hashCode();

    hashCode = hashCode * 8191 + ((isSetShow()) ? 131071 : 524287);
    if (isSetShow())
      hashCode = hashCode * 8191 + show;

    hashCode = hashCode * 8191 + ((isSetStatus()) ? 131071 : 524287);
    if (isSetStatus())
      hashCode = hashCode * 8191 + status.hashCode();

    hashCode = hashCode * 8191 + ((isSetExtend()) ? 131071 : 524287);
    if (isSetExtend())
      hashCode = hashCode * 8191 + extend.hashCode();

    hashCode = hashCode * 8191 + ((isSetExtra()) ? 131071 : 524287);
    if (isSetExtra())
      hashCode = hashCode * 8191 + extra.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TimPresence other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetId(), other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetOffline(), other.isSetOffline());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOffline()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.offline, other.offline);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSubStatus(), other.isSetSubStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subStatus, other.subStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetFromTid(), other.isSetFromTid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFromTid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fromTid, other.fromTid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetToTid(), other.isSetToTid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetToTid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.toTid, other.toTid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetToList(), other.isSetToList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetToList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.toList, other.toList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetShow(), other.isSetShow());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShow()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.show, other.show);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetStatus(), other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetExtend(), other.isSetExtend());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExtend()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extend, other.extend);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetExtra(), other.isSetExtra());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExtra()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extra, other.extra);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TimPresence(");
    boolean first = true;

    if (isSetId()) {
      sb.append("id:");
      sb.append(this.id);
      first = false;
    }
    if (isSetOffline()) {
      if (!first) sb.append(", ");
      sb.append("offline:");
      sb.append(this.offline);
      first = false;
    }
    if (isSetSubStatus()) {
      if (!first) sb.append(", ");
      sb.append("subStatus:");
      sb.append(this.subStatus);
      first = false;
    }
    if (isSetFromTid()) {
      if (!first) sb.append(", ");
      sb.append("fromTid:");
      if (this.fromTid == null) {
        sb.append("null");
      } else {
        sb.append(this.fromTid);
      }
      first = false;
    }
    if (isSetToTid()) {
      if (!first) sb.append(", ");
      sb.append("toTid:");
      if (this.toTid == null) {
        sb.append("null");
      } else {
        sb.append(this.toTid);
      }
      first = false;
    }
    if (isSetToList()) {
      if (!first) sb.append(", ");
      sb.append("toList:");
      if (this.toList == null) {
        sb.append("null");
      } else {
        sb.append(this.toList);
      }
      first = false;
    }
    if (isSetShow()) {
      if (!first) sb.append(", ");
      sb.append("show:");
      sb.append(this.show);
      first = false;
    }
    if (isSetStatus()) {
      if (!first) sb.append(", ");
      sb.append("status:");
      if (this.status == null) {
        sb.append("null");
      } else {
        sb.append(this.status);
      }
      first = false;
    }
    if (isSetExtend()) {
      if (!first) sb.append(", ");
      sb.append("extend:");
      if (this.extend == null) {
        sb.append("null");
      } else {
        sb.append(this.extend);
      }
      first = false;
    }
    if (isSetExtra()) {
      if (!first) sb.append(", ");
      sb.append("extra:");
      if (this.extra == null) {
        sb.append("null");
      } else {
        sb.append(this.extra);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (fromTid != null) {
      fromTid.validate();
    }
    if (toTid != null) {
      toTid.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TimPresenceStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TimPresenceStandardScheme getScheme() {
      return new TimPresenceStandardScheme();
    }
  }

  private static class TimPresenceStandardScheme extends org.apache.thrift.scheme.StandardScheme<TimPresence> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TimPresence struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // OFFLINE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.offline = iprot.readBool();
              struct.setOfflineIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SUB_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.subStatus = iprot.readByte();
              struct.setSubStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // FROM_TID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.fromTid = new Tid();
              struct.fromTid.read(iprot);
              struct.setFromTidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TO_TID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.toTid = new Tid();
              struct.toTid.read(iprot);
              struct.setToTidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TO_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list76 = iprot.readListBegin();
                struct.toList = new java.util.ArrayList<java.lang.String>(_list76.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _elem77;
                for (int _i78 = 0; _i78 < _list76.size; ++_i78)
                {
                  _elem77 = iprot.readString();
                  struct.toList.add(_elem77);
                }
                iprot.readListEnd();
              }
              struct.setToListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SHOW
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.show = iprot.readI16();
              struct.setShowIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.status = iprot.readString();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // EXTEND
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map79 = iprot.readMapBegin();
                struct.extend = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map79.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _key80;
                @org.apache.thrift.annotation.Nullable java.lang.String _val81;
                for (int _i82 = 0; _i82 < _map79.size; ++_i82)
                {
                  _key80 = iprot.readString();
                  _val81 = iprot.readString();
                  struct.extend.put(_key80, _val81);
                }
                iprot.readMapEnd();
              }
              struct.setExtendIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // EXTRA
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map83 = iprot.readMapBegin();
                struct.extra = new java.util.HashMap<java.lang.String,java.nio.ByteBuffer>(2*_map83.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _key84;
                @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer _val85;
                for (int _i86 = 0; _i86 < _map83.size; ++_i86)
                {
                  _key84 = iprot.readString();
                  _val85 = iprot.readBinary();
                  struct.extra.put(_key84, _val85);
                }
                iprot.readMapEnd();
              }
              struct.setExtraIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TimPresence struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetId()) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI64(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetOffline()) {
        oprot.writeFieldBegin(OFFLINE_FIELD_DESC);
        oprot.writeBool(struct.offline);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSubStatus()) {
        oprot.writeFieldBegin(SUB_STATUS_FIELD_DESC);
        oprot.writeByte(struct.subStatus);
        oprot.writeFieldEnd();
      }
      if (struct.fromTid != null) {
        if (struct.isSetFromTid()) {
          oprot.writeFieldBegin(FROM_TID_FIELD_DESC);
          struct.fromTid.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.toTid != null) {
        if (struct.isSetToTid()) {
          oprot.writeFieldBegin(TO_TID_FIELD_DESC);
          struct.toTid.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.toList != null) {
        if (struct.isSetToList()) {
          oprot.writeFieldBegin(TO_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.toList.size()));
            for (java.lang.String _iter87 : struct.toList)
            {
              oprot.writeString(_iter87);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetShow()) {
        oprot.writeFieldBegin(SHOW_FIELD_DESC);
        oprot.writeI16(struct.show);
        oprot.writeFieldEnd();
      }
      if (struct.status != null) {
        if (struct.isSetStatus()) {
          oprot.writeFieldBegin(STATUS_FIELD_DESC);
          oprot.writeString(struct.status);
          oprot.writeFieldEnd();
        }
      }
      if (struct.extend != null) {
        if (struct.isSetExtend()) {
          oprot.writeFieldBegin(EXTEND_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.extend.size()));
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter88 : struct.extend.entrySet())
            {
              oprot.writeString(_iter88.getKey());
              oprot.writeString(_iter88.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.extra != null) {
        if (struct.isSetExtra()) {
          oprot.writeFieldBegin(EXTRA_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.extra.size()));
            for (java.util.Map.Entry<java.lang.String, java.nio.ByteBuffer> _iter89 : struct.extra.entrySet())
            {
              oprot.writeString(_iter89.getKey());
              oprot.writeBinary(_iter89.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TimPresenceTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TimPresenceTupleScheme getScheme() {
      return new TimPresenceTupleScheme();
    }
  }

  private static class TimPresenceTupleScheme extends org.apache.thrift.scheme.TupleScheme<TimPresence> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TimPresence struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetOffline()) {
        optionals.set(1);
      }
      if (struct.isSetSubStatus()) {
        optionals.set(2);
      }
      if (struct.isSetFromTid()) {
        optionals.set(3);
      }
      if (struct.isSetToTid()) {
        optionals.set(4);
      }
      if (struct.isSetToList()) {
        optionals.set(5);
      }
      if (struct.isSetShow()) {
        optionals.set(6);
      }
      if (struct.isSetStatus()) {
        optionals.set(7);
      }
      if (struct.isSetExtend()) {
        optionals.set(8);
      }
      if (struct.isSetExtra()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetId()) {
        oprot.writeI64(struct.id);
      }
      if (struct.isSetOffline()) {
        oprot.writeBool(struct.offline);
      }
      if (struct.isSetSubStatus()) {
        oprot.writeByte(struct.subStatus);
      }
      if (struct.isSetFromTid()) {
        struct.fromTid.write(oprot);
      }
      if (struct.isSetToTid()) {
        struct.toTid.write(oprot);
      }
      if (struct.isSetToList()) {
        {
          oprot.writeI32(struct.toList.size());
          for (java.lang.String _iter90 : struct.toList)
          {
            oprot.writeString(_iter90);
          }
        }
      }
      if (struct.isSetShow()) {
        oprot.writeI16(struct.show);
      }
      if (struct.isSetStatus()) {
        oprot.writeString(struct.status);
      }
      if (struct.isSetExtend()) {
        {
          oprot.writeI32(struct.extend.size());
          for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter91 : struct.extend.entrySet())
          {
            oprot.writeString(_iter91.getKey());
            oprot.writeString(_iter91.getValue());
          }
        }
      }
      if (struct.isSetExtra()) {
        {
          oprot.writeI32(struct.extra.size());
          for (java.util.Map.Entry<java.lang.String, java.nio.ByteBuffer> _iter92 : struct.extra.entrySet())
          {
            oprot.writeString(_iter92.getKey());
            oprot.writeBinary(_iter92.getValue());
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TimPresence struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.offline = iprot.readBool();
        struct.setOfflineIsSet(true);
      }
      if (incoming.get(2)) {
        struct.subStatus = iprot.readByte();
        struct.setSubStatusIsSet(true);
      }
      if (incoming.get(3)) {
        struct.fromTid = new Tid();
        struct.fromTid.read(iprot);
        struct.setFromTidIsSet(true);
      }
      if (incoming.get(4)) {
        struct.toTid = new Tid();
        struct.toTid.read(iprot);
        struct.setToTidIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list93 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
          struct.toList = new java.util.ArrayList<java.lang.String>(_list93.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _elem94;
          for (int _i95 = 0; _i95 < _list93.size; ++_i95)
          {
            _elem94 = iprot.readString();
            struct.toList.add(_elem94);
          }
        }
        struct.setToListIsSet(true);
      }
      if (incoming.get(6)) {
        struct.show = iprot.readI16();
        struct.setShowIsSet(true);
      }
      if (incoming.get(7)) {
        struct.status = iprot.readString();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TMap _map96 = iprot.readMapBegin(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING); 
          struct.extend = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map96.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _key97;
          @org.apache.thrift.annotation.Nullable java.lang.String _val98;
          for (int _i99 = 0; _i99 < _map96.size; ++_i99)
          {
            _key97 = iprot.readString();
            _val98 = iprot.readString();
            struct.extend.put(_key97, _val98);
          }
        }
        struct.setExtendIsSet(true);
      }
      if (incoming.get(9)) {
        {
          org.apache.thrift.protocol.TMap _map100 = iprot.readMapBegin(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING); 
          struct.extra = new java.util.HashMap<java.lang.String,java.nio.ByteBuffer>(2*_map100.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _key101;
          @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer _val102;
          for (int _i103 = 0; _i103 < _map100.size; ++_i103)
          {
            _key101 = iprot.readString();
            _val102 = iprot.readBinary();
            struct.extra.put(_key101, _val102);
          }
        }
        struct.setExtraIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

