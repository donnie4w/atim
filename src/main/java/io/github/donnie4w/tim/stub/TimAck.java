/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package io.github.donnie4w.tim.stub;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.18.1)", date = "2023-12-19")
public class TimAck implements org.apache.thrift.TBase<TimAck, TimAck._Fields>, java.io.Serializable, Cloneable, Comparable<TimAck> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TimAck");

  private static final org.apache.thrift.protocol.TField OK_FIELD_DESC = new org.apache.thrift.protocol.TField("ok", org.apache.thrift.protocol.TType.BOOL, (short)1);
  private static final org.apache.thrift.protocol.TField TIM_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("timType", org.apache.thrift.protocol.TType.BYTE, (short)2);
  private static final org.apache.thrift.protocol.TField ERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("error", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField T_FIELD_DESC = new org.apache.thrift.protocol.TField("t", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField N_FIELD_DESC = new org.apache.thrift.protocol.TField("n", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField ACK_INT_FIELD_DESC = new org.apache.thrift.protocol.TField("ackInt", org.apache.thrift.protocol.TType.I64, (short)6);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TimAckStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TimAckTupleSchemeFactory();

  public boolean ok; // required
  public byte timType; // required
  public @org.apache.thrift.annotation.Nullable TimError error; // optional
  public long t; // optional
  public @org.apache.thrift.annotation.Nullable String n; // optional
  public long ackInt; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    OK((short)1, "ok"),
    TIM_TYPE((short)2, "timType"),
    ERROR((short)3, "error"),
    T((short)4, "t"),
    N((short)5, "n"),
    ACK_INT((short)6, "ackInt");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // OK
          return OK;
        case 2: // TIM_TYPE
          return TIM_TYPE;
        case 3: // ERROR
          return ERROR;
        case 4: // T
          return T;
        case 5: // N
          return N;
        case 6: // ACK_INT
          return ACK_INT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __OK_ISSET_ID = 0;
  private static final int __TIMTYPE_ISSET_ID = 1;
  private static final int __T_ISSET_ID = 2;
  private static final int __ACKINT_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ERROR,_Fields.T,_Fields.N,_Fields.ACK_INT};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.OK, new org.apache.thrift.meta_data.FieldMetaData("ok", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.TIM_TYPE, new org.apache.thrift.meta_data.FieldMetaData("timType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.ERROR, new org.apache.thrift.meta_data.FieldMetaData("error", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TimError.class)));
    tmpMap.put(_Fields.T, new org.apache.thrift.meta_data.FieldMetaData("t", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.N, new org.apache.thrift.meta_data.FieldMetaData("n", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACK_INT, new org.apache.thrift.meta_data.FieldMetaData("ackInt", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TimAck.class, metaDataMap);
  }

  public TimAck() {
  }

  public TimAck(
    boolean ok,
    byte timType)
  {
    this();
    this.ok = ok;
    setOkIsSet(true);
    this.timType = timType;
    setTimTypeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TimAck(TimAck other) {
    __isset_bitfield = other.__isset_bitfield;
    this.ok = other.ok;
    this.timType = other.timType;
    if (other.isSetError()) {
      this.error = new TimError(other.error);
    }
    this.t = other.t;
    if (other.isSetN()) {
      this.n = other.n;
    }
    this.ackInt = other.ackInt;
  }

  @Override
  public TimAck deepCopy() {
    return new TimAck(this);
  }

  @Override
  public void clear() {
    setOkIsSet(false);
    this.ok = false;
    setTimTypeIsSet(false);
    this.timType = 0;
    this.error = null;
    setTIsSet(false);
    this.t = 0;
    this.n = null;
    setAckIntIsSet(false);
    this.ackInt = 0;
  }

  public boolean isOk() {
    return this.ok;
  }

  public TimAck setOk(boolean ok) {
    this.ok = ok;
    setOkIsSet(true);
    return this;
  }

  public void unsetOk() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __OK_ISSET_ID);
  }

  /** Returns true if field ok is set (has been assigned a value) and false otherwise */
  public boolean isSetOk() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __OK_ISSET_ID);
  }

  public void setOkIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __OK_ISSET_ID, value);
  }

  public byte getTimType() {
    return this.timType;
  }

  public TimAck setTimType(byte timType) {
    this.timType = timType;
    setTimTypeIsSet(true);
    return this;
  }

  public void unsetTimType() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TIMTYPE_ISSET_ID);
  }

  /** Returns true if field timType is set (has been assigned a value) and false otherwise */
  public boolean isSetTimType() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TIMTYPE_ISSET_ID);
  }

  public void setTimTypeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TIMTYPE_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public TimError getError() {
    return this.error;
  }

  public TimAck setError(@org.apache.thrift.annotation.Nullable TimError error) {
    this.error = error;
    return this;
  }

  public void unsetError() {
    this.error = null;
  }

  /** Returns true if field error is set (has been assigned a value) and false otherwise */
  public boolean isSetError() {
    return this.error != null;
  }

  public void setErrorIsSet(boolean value) {
    if (!value) {
      this.error = null;
    }
  }

  public long getT() {
    return this.t;
  }

  public TimAck setT(long t) {
    this.t = t;
    setTIsSet(true);
    return this;
  }

  public void unsetT() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __T_ISSET_ID);
  }

  /** Returns true if field t is set (has been assigned a value) and false otherwise */
  public boolean isSetT() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __T_ISSET_ID);
  }

  public void setTIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __T_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public String getN() {
    return this.n;
  }

  public TimAck setN(@org.apache.thrift.annotation.Nullable String n) {
    this.n = n;
    return this;
  }

  public void unsetN() {
    this.n = null;
  }

  /** Returns true if field n is set (has been assigned a value) and false otherwise */
  public boolean isSetN() {
    return this.n != null;
  }

  public void setNIsSet(boolean value) {
    if (!value) {
      this.n = null;
    }
  }

  public long getAckInt() {
    return this.ackInt;
  }

  public TimAck setAckInt(long ackInt) {
    this.ackInt = ackInt;
    setAckIntIsSet(true);
    return this;
  }

  public void unsetAckInt() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ACKINT_ISSET_ID);
  }

  /** Returns true if field ackInt is set (has been assigned a value) and false otherwise */
  public boolean isSetAckInt() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ACKINT_ISSET_ID);
  }

  public void setAckIntIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ACKINT_ISSET_ID, value);
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
    switch (field) {
    case OK:
      if (value == null) {
        unsetOk();
      } else {
        setOk((Boolean)value);
      }
      break;

    case TIM_TYPE:
      if (value == null) {
        unsetTimType();
      } else {
        setTimType((Byte)value);
      }
      break;

    case ERROR:
      if (value == null) {
        unsetError();
      } else {
        setError((TimError)value);
      }
      break;

    case T:
      if (value == null) {
        unsetT();
      } else {
        setT((Long)value);
      }
      break;

    case N:
      if (value == null) {
        unsetN();
      } else {
        setN((String)value);
      }
      break;

    case ACK_INT:
      if (value == null) {
        unsetAckInt();
      } else {
        setAckInt((Long)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public Object getFieldValue(_Fields field) {
    switch (field) {
    case OK:
      return isOk();

    case TIM_TYPE:
      return getTimType();

    case ERROR:
      return getError();

    case T:
      return getT();

    case N:
      return getN();

    case ACK_INT:
      return getAckInt();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case OK:
      return isSetOk();
    case TIM_TYPE:
      return isSetTimType();
    case ERROR:
      return isSetError();
    case T:
      return isSetT();
    case N:
      return isSetN();
    case ACK_INT:
      return isSetAckInt();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that instanceof TimAck)
      return this.equals((TimAck)that);
    return false;
  }

  public boolean equals(TimAck that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_ok = true;
    boolean that_present_ok = true;
    if (this_present_ok || that_present_ok) {
      if (!(this_present_ok && that_present_ok))
        return false;
      if (this.ok != that.ok)
        return false;
    }

    boolean this_present_timType = true;
    boolean that_present_timType = true;
    if (this_present_timType || that_present_timType) {
      if (!(this_present_timType && that_present_timType))
        return false;
      if (this.timType != that.timType)
        return false;
    }

    boolean this_present_error = true && this.isSetError();
    boolean that_present_error = true && that.isSetError();
    if (this_present_error || that_present_error) {
      if (!(this_present_error && that_present_error))
        return false;
      if (!this.error.equals(that.error))
        return false;
    }

    boolean this_present_t = true && this.isSetT();
    boolean that_present_t = true && that.isSetT();
    if (this_present_t || that_present_t) {
      if (!(this_present_t && that_present_t))
        return false;
      if (this.t != that.t)
        return false;
    }

    boolean this_present_n = true && this.isSetN();
    boolean that_present_n = true && that.isSetN();
    if (this_present_n || that_present_n) {
      if (!(this_present_n && that_present_n))
        return false;
      if (!this.n.equals(that.n))
        return false;
    }

    boolean this_present_ackInt = true && this.isSetAckInt();
    boolean that_present_ackInt = true && that.isSetAckInt();
    if (this_present_ackInt || that_present_ackInt) {
      if (!(this_present_ackInt && that_present_ackInt))
        return false;
      if (this.ackInt != that.ackInt)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((ok) ? 131071 : 524287);

    hashCode = hashCode * 8191 + (int) (timType);

    hashCode = hashCode * 8191 + ((isSetError()) ? 131071 : 524287);
    if (isSetError())
      hashCode = hashCode * 8191 + error.hashCode();

    hashCode = hashCode * 8191 + ((isSetT()) ? 131071 : 524287);
    if (isSetT())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(t);

    hashCode = hashCode * 8191 + ((isSetN()) ? 131071 : 524287);
    if (isSetN())
      hashCode = hashCode * 8191 + n.hashCode();

    hashCode = hashCode * 8191 + ((isSetAckInt()) ? 131071 : 524287);
    if (isSetAckInt())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(ackInt);

    return hashCode;
  }

  @Override
  public int compareTo(TimAck other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.compare(isSetOk(), other.isSetOk());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOk()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ok, other.ok);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetTimType(), other.isSetTimType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timType, other.timType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetError(), other.isSetError());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetError()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.error, other.error);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetT(), other.isSetT());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetT()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.t, other.t);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetN(), other.isSetN());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetN()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.n, other.n);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetAckInt(), other.isSetAckInt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAckInt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ackInt, other.ackInt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TimAck(");
    boolean first = true;

    sb.append("ok:");
    sb.append(this.ok);
    first = false;
    if (!first) sb.append(", ");
    sb.append("timType:");
    sb.append(this.timType);
    first = false;
    if (isSetError()) {
      if (!first) sb.append(", ");
      sb.append("error:");
      if (this.error == null) {
        sb.append("null");
      } else {
        sb.append(this.error);
      }
      first = false;
    }
    if (isSetT()) {
      if (!first) sb.append(", ");
      sb.append("t:");
      sb.append(this.t);
      first = false;
    }
    if (isSetN()) {
      if (!first) sb.append(", ");
      sb.append("n:");
      if (this.n == null) {
        sb.append("null");
      } else {
        sb.append(this.n);
      }
      first = false;
    }
    if (isSetAckInt()) {
      if (!first) sb.append(", ");
      sb.append("ackInt:");
      sb.append(this.ackInt);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'ok' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'timType' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
    if (error != null) {
      error.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TimAckStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TimAckStandardScheme getScheme() {
      return new TimAckStandardScheme();
    }
  }

  private static class TimAckStandardScheme extends org.apache.thrift.scheme.StandardScheme<TimAck> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TimAck struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // OK
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.ok = iprot.readBool();
              struct.setOkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TIM_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.timType = iprot.readByte();
              struct.setTimTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ERROR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.error = new TimError();
              struct.error.read(iprot);
              struct.setErrorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // T
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.t = iprot.readI64();
              struct.setTIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // N
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.n = iprot.readString();
              struct.setNIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ACK_INT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.ackInt = iprot.readI64();
              struct.setAckIntIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetOk()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'ok' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetTimType()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'timType' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TimAck struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(OK_FIELD_DESC);
      oprot.writeBool(struct.ok);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TIM_TYPE_FIELD_DESC);
      oprot.writeByte(struct.timType);
      oprot.writeFieldEnd();
      if (struct.error != null) {
        if (struct.isSetError()) {
          oprot.writeFieldBegin(ERROR_FIELD_DESC);
          struct.error.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetT()) {
        oprot.writeFieldBegin(T_FIELD_DESC);
        oprot.writeI64(struct.t);
        oprot.writeFieldEnd();
      }
      if (struct.n != null) {
        if (struct.isSetN()) {
          oprot.writeFieldBegin(N_FIELD_DESC);
          oprot.writeString(struct.n);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetAckInt()) {
        oprot.writeFieldBegin(ACK_INT_FIELD_DESC);
        oprot.writeI64(struct.ackInt);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TimAckTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TimAckTupleScheme getScheme() {
      return new TimAckTupleScheme();
    }
  }

  private static class TimAckTupleScheme extends org.apache.thrift.scheme.TupleScheme<TimAck> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TimAck struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeBool(struct.ok);
      oprot.writeByte(struct.timType);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetError()) {
        optionals.set(0);
      }
      if (struct.isSetT()) {
        optionals.set(1);
      }
      if (struct.isSetN()) {
        optionals.set(2);
      }
      if (struct.isSetAckInt()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetError()) {
        struct.error.write(oprot);
      }
      if (struct.isSetT()) {
        oprot.writeI64(struct.t);
      }
      if (struct.isSetN()) {
        oprot.writeString(struct.n);
      }
      if (struct.isSetAckInt()) {
        oprot.writeI64(struct.ackInt);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TimAck struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.ok = iprot.readBool();
      struct.setOkIsSet(true);
      struct.timType = iprot.readByte();
      struct.setTimTypeIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.error = new TimError();
        struct.error.read(iprot);
        struct.setErrorIsSet(true);
      }
      if (incoming.get(1)) {
        struct.t = iprot.readI64();
        struct.setTIsSet(true);
      }
      if (incoming.get(2)) {
        struct.n = iprot.readString();
        struct.setNIsSet(true);
      }
      if (incoming.get(3)) {
        struct.ackInt = iprot.readI64();
        struct.setAckIntIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

