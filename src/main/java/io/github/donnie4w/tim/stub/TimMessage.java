/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package io.github.donnie4w.tim.stub;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.18.1)", date = "2023-12-03")
public class TimMessage implements org.apache.thrift.TBase<TimMessage, TimMessage._Fields>, java.io.Serializable, Cloneable, Comparable<TimMessage> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TimMessage");

  private static final org.apache.thrift.protocol.TField MS_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("msType", org.apache.thrift.protocol.TType.BYTE, (short)1);
  private static final org.apache.thrift.protocol.TField OD_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("odType", org.apache.thrift.protocol.TType.BYTE, (short)2);
  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField MID_FIELD_DESC = new org.apache.thrift.protocol.TField("mid", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField BN_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("bnType", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField FROM_TID_FIELD_DESC = new org.apache.thrift.protocol.TField("fromTid", org.apache.thrift.protocol.TType.STRUCT, (short)6);
  private static final org.apache.thrift.protocol.TField TO_TID_FIELD_DESC = new org.apache.thrift.protocol.TField("toTid", org.apache.thrift.protocol.TType.STRUCT, (short)7);
  private static final org.apache.thrift.protocol.TField ROOM_TID_FIELD_DESC = new org.apache.thrift.protocol.TField("roomTid", org.apache.thrift.protocol.TType.STRUCT, (short)8);
  private static final org.apache.thrift.protocol.TField DATA_BINARY_FIELD_DESC = new org.apache.thrift.protocol.TField("dataBinary", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField DATA_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("dataString", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField IS_OFFLINE_FIELD_DESC = new org.apache.thrift.protocol.TField("isOffline", org.apache.thrift.protocol.TType.BOOL, (short)11);
  private static final org.apache.thrift.protocol.TField TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("timestamp", org.apache.thrift.protocol.TType.I64, (short)12);
  private static final org.apache.thrift.protocol.TField UDTYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("udtype", org.apache.thrift.protocol.TType.I16, (short)13);
  private static final org.apache.thrift.protocol.TField UDSHOW_FIELD_DESC = new org.apache.thrift.protocol.TField("udshow", org.apache.thrift.protocol.TType.I16, (short)14);
  private static final org.apache.thrift.protocol.TField EXTEND_FIELD_DESC = new org.apache.thrift.protocol.TField("extend", org.apache.thrift.protocol.TType.MAP, (short)15);
  private static final org.apache.thrift.protocol.TField EXTRA_FIELD_DESC = new org.apache.thrift.protocol.TField("extra", org.apache.thrift.protocol.TType.MAP, (short)16);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TimMessageStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TimMessageTupleSchemeFactory();

  public byte msType; // required
  public byte odType; // required
  public long id; // optional
  public long mid; // optional
  public int bnType; // optional
  public @org.apache.thrift.annotation.Nullable Tid fromTid; // optional
  public @org.apache.thrift.annotation.Nullable Tid toTid; // optional
  public @org.apache.thrift.annotation.Nullable Tid roomTid; // optional
  public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer dataBinary; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String dataString; // optional
  public boolean isOffline; // optional
  public long timestamp; // optional
  public short udtype; // optional
  public short udshow; // optional
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> extend; // optional
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.nio.ByteBuffer> extra; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MS_TYPE((short)1, "msType"),
    OD_TYPE((short)2, "odType"),
    ID((short)3, "id"),
    MID((short)4, "mid"),
    BN_TYPE((short)5, "bnType"),
    FROM_TID((short)6, "fromTid"),
    TO_TID((short)7, "toTid"),
    ROOM_TID((short)8, "roomTid"),
    DATA_BINARY((short)9, "dataBinary"),
    DATA_STRING((short)10, "dataString"),
    IS_OFFLINE((short)11, "isOffline"),
    TIMESTAMP((short)12, "timestamp"),
    UDTYPE((short)13, "udtype"),
    UDSHOW((short)14, "udshow"),
    EXTEND((short)15, "extend"),
    EXTRA((short)16, "extra");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MS_TYPE
          return MS_TYPE;
        case 2: // OD_TYPE
          return OD_TYPE;
        case 3: // ID
          return ID;
        case 4: // MID
          return MID;
        case 5: // BN_TYPE
          return BN_TYPE;
        case 6: // FROM_TID
          return FROM_TID;
        case 7: // TO_TID
          return TO_TID;
        case 8: // ROOM_TID
          return ROOM_TID;
        case 9: // DATA_BINARY
          return DATA_BINARY;
        case 10: // DATA_STRING
          return DATA_STRING;
        case 11: // IS_OFFLINE
          return IS_OFFLINE;
        case 12: // TIMESTAMP
          return TIMESTAMP;
        case 13: // UDTYPE
          return UDTYPE;
        case 14: // UDSHOW
          return UDSHOW;
        case 15: // EXTEND
          return EXTEND;
        case 16: // EXTRA
          return EXTRA;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MSTYPE_ISSET_ID = 0;
  private static final int __ODTYPE_ISSET_ID = 1;
  private static final int __ID_ISSET_ID = 2;
  private static final int __MID_ISSET_ID = 3;
  private static final int __BNTYPE_ISSET_ID = 4;
  private static final int __ISOFFLINE_ISSET_ID = 5;
  private static final int __TIMESTAMP_ISSET_ID = 6;
  private static final int __UDTYPE_ISSET_ID = 7;
  private static final int __UDSHOW_ISSET_ID = 8;
  private short __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ID,_Fields.MID,_Fields.BN_TYPE,_Fields.FROM_TID,_Fields.TO_TID,_Fields.ROOM_TID,_Fields.DATA_BINARY,_Fields.DATA_STRING,_Fields.IS_OFFLINE,_Fields.TIMESTAMP,_Fields.UDTYPE,_Fields.UDSHOW,_Fields.EXTEND,_Fields.EXTRA};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MS_TYPE, new org.apache.thrift.meta_data.FieldMetaData("msType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.OD_TYPE, new org.apache.thrift.meta_data.FieldMetaData("odType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MID, new org.apache.thrift.meta_data.FieldMetaData("mid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.BN_TYPE, new org.apache.thrift.meta_data.FieldMetaData("bnType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FROM_TID, new org.apache.thrift.meta_data.FieldMetaData("fromTid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Tid.class)));
    tmpMap.put(_Fields.TO_TID, new org.apache.thrift.meta_data.FieldMetaData("toTid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Tid.class)));
    tmpMap.put(_Fields.ROOM_TID, new org.apache.thrift.meta_data.FieldMetaData("roomTid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Tid.class)));
    tmpMap.put(_Fields.DATA_BINARY, new org.apache.thrift.meta_data.FieldMetaData("dataBinary", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.DATA_STRING, new org.apache.thrift.meta_data.FieldMetaData("dataString", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_OFFLINE, new org.apache.thrift.meta_data.FieldMetaData("isOffline", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("timestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.UDTYPE, new org.apache.thrift.meta_data.FieldMetaData("udtype", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.UDSHOW, new org.apache.thrift.meta_data.FieldMetaData("udshow", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.EXTEND, new org.apache.thrift.meta_data.FieldMetaData("extend", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.EXTRA, new org.apache.thrift.meta_data.FieldMetaData("extra", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING            , true))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TimMessage.class, metaDataMap);
  }

  public TimMessage() {
  }

  public TimMessage(
    byte msType,
    byte odType)
  {
    this();
    this.msType = msType;
    setMsTypeIsSet(true);
    this.odType = odType;
    setOdTypeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TimMessage(TimMessage other) {
    __isset_bitfield = other.__isset_bitfield;
    this.msType = other.msType;
    this.odType = other.odType;
    this.id = other.id;
    this.mid = other.mid;
    this.bnType = other.bnType;
    if (other.isSetFromTid()) {
      this.fromTid = new Tid(other.fromTid);
    }
    if (other.isSetToTid()) {
      this.toTid = new Tid(other.toTid);
    }
    if (other.isSetRoomTid()) {
      this.roomTid = new Tid(other.roomTid);
    }
    if (other.isSetDataBinary()) {
      this.dataBinary = org.apache.thrift.TBaseHelper.copyBinary(other.dataBinary);
    }
    if (other.isSetDataString()) {
      this.dataString = other.dataString;
    }
    this.isOffline = other.isOffline;
    this.timestamp = other.timestamp;
    this.udtype = other.udtype;
    this.udshow = other.udshow;
    if (other.isSetExtend()) {
      java.util.Map<java.lang.String,java.lang.String> __this__extend = new java.util.HashMap<java.lang.String,java.lang.String>(other.extend);
      this.extend = __this__extend;
    }
    if (other.isSetExtra()) {
      java.util.Map<java.lang.String,java.nio.ByteBuffer> __this__extra = new java.util.HashMap<java.lang.String,java.nio.ByteBuffer>(other.extra);
      this.extra = __this__extra;
    }
  }

  @Override
  public TimMessage deepCopy() {
    return new TimMessage(this);
  }

  @Override
  public void clear() {
    setMsTypeIsSet(false);
    this.msType = 0;
    setOdTypeIsSet(false);
    this.odType = 0;
    setIdIsSet(false);
    this.id = 0;
    setMidIsSet(false);
    this.mid = 0;
    setBnTypeIsSet(false);
    this.bnType = 0;
    this.fromTid = null;
    this.toTid = null;
    this.roomTid = null;
    this.dataBinary = null;
    this.dataString = null;
    setIsOfflineIsSet(false);
    this.isOffline = false;
    setTimestampIsSet(false);
    this.timestamp = 0;
    setUdtypeIsSet(false);
    this.udtype = 0;
    setUdshowIsSet(false);
    this.udshow = 0;
    this.extend = null;
    this.extra = null;
  }

  public byte getMsType() {
    return this.msType;
  }

  public TimMessage setMsType(byte msType) {
    this.msType = msType;
    setMsTypeIsSet(true);
    return this;
  }

  public void unsetMsType() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MSTYPE_ISSET_ID);
  }

  /** Returns true if field msType is set (has been assigned a value) and false otherwise */
  public boolean isSetMsType() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MSTYPE_ISSET_ID);
  }

  public void setMsTypeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MSTYPE_ISSET_ID, value);
  }

  public byte getOdType() {
    return this.odType;
  }

  public TimMessage setOdType(byte odType) {
    this.odType = odType;
    setOdTypeIsSet(true);
    return this;
  }

  public void unsetOdType() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ODTYPE_ISSET_ID);
  }

  /** Returns true if field odType is set (has been assigned a value) and false otherwise */
  public boolean isSetOdType() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ODTYPE_ISSET_ID);
  }

  public void setOdTypeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ODTYPE_ISSET_ID, value);
  }

  public long getId() {
    return this.id;
  }

  public TimMessage setId(long id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public long getMid() {
    return this.mid;
  }

  public TimMessage setMid(long mid) {
    this.mid = mid;
    setMidIsSet(true);
    return this;
  }

  public void unsetMid() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MID_ISSET_ID);
  }

  /** Returns true if field mid is set (has been assigned a value) and false otherwise */
  public boolean isSetMid() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MID_ISSET_ID);
  }

  public void setMidIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MID_ISSET_ID, value);
  }

  public int getBnType() {
    return this.bnType;
  }

  public TimMessage setBnType(int bnType) {
    this.bnType = bnType;
    setBnTypeIsSet(true);
    return this;
  }

  public void unsetBnType() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BNTYPE_ISSET_ID);
  }

  /** Returns true if field bnType is set (has been assigned a value) and false otherwise */
  public boolean isSetBnType() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BNTYPE_ISSET_ID);
  }

  public void setBnTypeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BNTYPE_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public Tid getFromTid() {
    return this.fromTid;
  }

  public TimMessage setFromTid(@org.apache.thrift.annotation.Nullable Tid fromTid) {
    this.fromTid = fromTid;
    return this;
  }

  public void unsetFromTid() {
    this.fromTid = null;
  }

  /** Returns true if field fromTid is set (has been assigned a value) and false otherwise */
  public boolean isSetFromTid() {
    return this.fromTid != null;
  }

  public void setFromTidIsSet(boolean value) {
    if (!value) {
      this.fromTid = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public Tid getToTid() {
    return this.toTid;
  }

  public TimMessage setToTid(@org.apache.thrift.annotation.Nullable Tid toTid) {
    this.toTid = toTid;
    return this;
  }

  public void unsetToTid() {
    this.toTid = null;
  }

  /** Returns true if field toTid is set (has been assigned a value) and false otherwise */
  public boolean isSetToTid() {
    return this.toTid != null;
  }

  public void setToTidIsSet(boolean value) {
    if (!value) {
      this.toTid = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public Tid getRoomTid() {
    return this.roomTid;
  }

  public TimMessage setRoomTid(@org.apache.thrift.annotation.Nullable Tid roomTid) {
    this.roomTid = roomTid;
    return this;
  }

  public void unsetRoomTid() {
    this.roomTid = null;
  }

  /** Returns true if field roomTid is set (has been assigned a value) and false otherwise */
  public boolean isSetRoomTid() {
    return this.roomTid != null;
  }

  public void setRoomTidIsSet(boolean value) {
    if (!value) {
      this.roomTid = null;
    }
  }

  public byte[] getDataBinary() {
    setDataBinary(org.apache.thrift.TBaseHelper.rightSize(dataBinary));
    return dataBinary == null ? null : dataBinary.array();
  }

  public java.nio.ByteBuffer bufferForDataBinary() {
    return org.apache.thrift.TBaseHelper.copyBinary(dataBinary);
  }

  public TimMessage setDataBinary(byte[] dataBinary) {
    this.dataBinary = dataBinary == null ? (java.nio.ByteBuffer)null   : java.nio.ByteBuffer.wrap(dataBinary.clone());
    return this;
  }

  public TimMessage setDataBinary(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer dataBinary) {
    this.dataBinary = org.apache.thrift.TBaseHelper.copyBinary(dataBinary);
    return this;
  }

  public void unsetDataBinary() {
    this.dataBinary = null;
  }

  /** Returns true if field dataBinary is set (has been assigned a value) and false otherwise */
  public boolean isSetDataBinary() {
    return this.dataBinary != null;
  }

  public void setDataBinaryIsSet(boolean value) {
    if (!value) {
      this.dataBinary = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getDataString() {
    return this.dataString;
  }

  public TimMessage setDataString(@org.apache.thrift.annotation.Nullable java.lang.String dataString) {
    this.dataString = dataString;
    return this;
  }

  public void unsetDataString() {
    this.dataString = null;
  }

  /** Returns true if field dataString is set (has been assigned a value) and false otherwise */
  public boolean isSetDataString() {
    return this.dataString != null;
  }

  public void setDataStringIsSet(boolean value) {
    if (!value) {
      this.dataString = null;
    }
  }

  public boolean isIsOffline() {
    return this.isOffline;
  }

  public TimMessage setIsOffline(boolean isOffline) {
    this.isOffline = isOffline;
    setIsOfflineIsSet(true);
    return this;
  }

  public void unsetIsOffline() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISOFFLINE_ISSET_ID);
  }

  /** Returns true if field isOffline is set (has been assigned a value) and false otherwise */
  public boolean isSetIsOffline() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISOFFLINE_ISSET_ID);
  }

  public void setIsOfflineIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISOFFLINE_ISSET_ID, value);
  }

  public long getTimestamp() {
    return this.timestamp;
  }

  public TimMessage setTimestamp(long timestamp) {
    this.timestamp = timestamp;
    setTimestampIsSet(true);
    return this;
  }

  public void unsetTimestamp() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
  }

  /** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetTimestamp() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
  }

  public void setTimestampIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TIMESTAMP_ISSET_ID, value);
  }

  public short getUdtype() {
    return this.udtype;
  }

  public TimMessage setUdtype(short udtype) {
    this.udtype = udtype;
    setUdtypeIsSet(true);
    return this;
  }

  public void unsetUdtype() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __UDTYPE_ISSET_ID);
  }

  /** Returns true if field udtype is set (has been assigned a value) and false otherwise */
  public boolean isSetUdtype() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __UDTYPE_ISSET_ID);
  }

  public void setUdtypeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __UDTYPE_ISSET_ID, value);
  }

  public short getUdshow() {
    return this.udshow;
  }

  public TimMessage setUdshow(short udshow) {
    this.udshow = udshow;
    setUdshowIsSet(true);
    return this;
  }

  public void unsetUdshow() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __UDSHOW_ISSET_ID);
  }

  /** Returns true if field udshow is set (has been assigned a value) and false otherwise */
  public boolean isSetUdshow() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __UDSHOW_ISSET_ID);
  }

  public void setUdshowIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __UDSHOW_ISSET_ID, value);
  }

  public int getExtendSize() {
    return (this.extend == null) ? 0 : this.extend.size();
  }

  public void putToExtend(java.lang.String key, java.lang.String val) {
    if (this.extend == null) {
      this.extend = new java.util.HashMap<java.lang.String,java.lang.String>();
    }
    this.extend.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.String,java.lang.String> getExtend() {
    return this.extend;
  }

  public TimMessage setExtend(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> extend) {
    this.extend = extend;
    return this;
  }

  public void unsetExtend() {
    this.extend = null;
  }

  /** Returns true if field extend is set (has been assigned a value) and false otherwise */
  public boolean isSetExtend() {
    return this.extend != null;
  }

  public void setExtendIsSet(boolean value) {
    if (!value) {
      this.extend = null;
    }
  }

  public int getExtraSize() {
    return (this.extra == null) ? 0 : this.extra.size();
  }

  public void putToExtra(java.lang.String key, java.nio.ByteBuffer val) {
    if (this.extra == null) {
      this.extra = new java.util.HashMap<java.lang.String,java.nio.ByteBuffer>();
    }
    this.extra.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.String,java.nio.ByteBuffer> getExtra() {
    return this.extra;
  }

  public TimMessage setExtra(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.nio.ByteBuffer> extra) {
    this.extra = extra;
    return this;
  }

  public void unsetExtra() {
    this.extra = null;
  }

  /** Returns true if field extra is set (has been assigned a value) and false otherwise */
  public boolean isSetExtra() {
    return this.extra != null;
  }

  public void setExtraIsSet(boolean value) {
    if (!value) {
      this.extra = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case MS_TYPE:
      if (value == null) {
        unsetMsType();
      } else {
        setMsType((java.lang.Byte)value);
      }
      break;

    case OD_TYPE:
      if (value == null) {
        unsetOdType();
      } else {
        setOdType((java.lang.Byte)value);
      }
      break;

    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((java.lang.Long)value);
      }
      break;

    case MID:
      if (value == null) {
        unsetMid();
      } else {
        setMid((java.lang.Long)value);
      }
      break;

    case BN_TYPE:
      if (value == null) {
        unsetBnType();
      } else {
        setBnType((java.lang.Integer)value);
      }
      break;

    case FROM_TID:
      if (value == null) {
        unsetFromTid();
      } else {
        setFromTid((Tid)value);
      }
      break;

    case TO_TID:
      if (value == null) {
        unsetToTid();
      } else {
        setToTid((Tid)value);
      }
      break;

    case ROOM_TID:
      if (value == null) {
        unsetRoomTid();
      } else {
        setRoomTid((Tid)value);
      }
      break;

    case DATA_BINARY:
      if (value == null) {
        unsetDataBinary();
      } else {
        if (value instanceof byte[]) {
          setDataBinary((byte[])value);
        } else {
          setDataBinary((java.nio.ByteBuffer)value);
        }
      }
      break;

    case DATA_STRING:
      if (value == null) {
        unsetDataString();
      } else {
        setDataString((java.lang.String)value);
      }
      break;

    case IS_OFFLINE:
      if (value == null) {
        unsetIsOffline();
      } else {
        setIsOffline((java.lang.Boolean)value);
      }
      break;

    case TIMESTAMP:
      if (value == null) {
        unsetTimestamp();
      } else {
        setTimestamp((java.lang.Long)value);
      }
      break;

    case UDTYPE:
      if (value == null) {
        unsetUdtype();
      } else {
        setUdtype((java.lang.Short)value);
      }
      break;

    case UDSHOW:
      if (value == null) {
        unsetUdshow();
      } else {
        setUdshow((java.lang.Short)value);
      }
      break;

    case EXTEND:
      if (value == null) {
        unsetExtend();
      } else {
        setExtend((java.util.Map<java.lang.String,java.lang.String>)value);
      }
      break;

    case EXTRA:
      if (value == null) {
        unsetExtra();
      } else {
        setExtra((java.util.Map<java.lang.String,java.nio.ByteBuffer>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case MS_TYPE:
      return getMsType();

    case OD_TYPE:
      return getOdType();

    case ID:
      return getId();

    case MID:
      return getMid();

    case BN_TYPE:
      return getBnType();

    case FROM_TID:
      return getFromTid();

    case TO_TID:
      return getToTid();

    case ROOM_TID:
      return getRoomTid();

    case DATA_BINARY:
      return getDataBinary();

    case DATA_STRING:
      return getDataString();

    case IS_OFFLINE:
      return isIsOffline();

    case TIMESTAMP:
      return getTimestamp();

    case UDTYPE:
      return getUdtype();

    case UDSHOW:
      return getUdshow();

    case EXTEND:
      return getExtend();

    case EXTRA:
      return getExtra();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case MS_TYPE:
      return isSetMsType();
    case OD_TYPE:
      return isSetOdType();
    case ID:
      return isSetId();
    case MID:
      return isSetMid();
    case BN_TYPE:
      return isSetBnType();
    case FROM_TID:
      return isSetFromTid();
    case TO_TID:
      return isSetToTid();
    case ROOM_TID:
      return isSetRoomTid();
    case DATA_BINARY:
      return isSetDataBinary();
    case DATA_STRING:
      return isSetDataString();
    case IS_OFFLINE:
      return isSetIsOffline();
    case TIMESTAMP:
      return isSetTimestamp();
    case UDTYPE:
      return isSetUdtype();
    case UDSHOW:
      return isSetUdshow();
    case EXTEND:
      return isSetExtend();
    case EXTRA:
      return isSetExtra();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TimMessage)
      return this.equals((TimMessage)that);
    return false;
  }

  public boolean equals(TimMessage that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_msType = true;
    boolean that_present_msType = true;
    if (this_present_msType || that_present_msType) {
      if (!(this_present_msType && that_present_msType))
        return false;
      if (this.msType != that.msType)
        return false;
    }

    boolean this_present_odType = true;
    boolean that_present_odType = true;
    if (this_present_odType || that_present_odType) {
      if (!(this_present_odType && that_present_odType))
        return false;
      if (this.odType != that.odType)
        return false;
    }

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_mid = true && this.isSetMid();
    boolean that_present_mid = true && that.isSetMid();
    if (this_present_mid || that_present_mid) {
      if (!(this_present_mid && that_present_mid))
        return false;
      if (this.mid != that.mid)
        return false;
    }

    boolean this_present_bnType = true && this.isSetBnType();
    boolean that_present_bnType = true && that.isSetBnType();
    if (this_present_bnType || that_present_bnType) {
      if (!(this_present_bnType && that_present_bnType))
        return false;
      if (this.bnType != that.bnType)
        return false;
    }

    boolean this_present_fromTid = true && this.isSetFromTid();
    boolean that_present_fromTid = true && that.isSetFromTid();
    if (this_present_fromTid || that_present_fromTid) {
      if (!(this_present_fromTid && that_present_fromTid))
        return false;
      if (!this.fromTid.equals(that.fromTid))
        return false;
    }

    boolean this_present_toTid = true && this.isSetToTid();
    boolean that_present_toTid = true && that.isSetToTid();
    if (this_present_toTid || that_present_toTid) {
      if (!(this_present_toTid && that_present_toTid))
        return false;
      if (!this.toTid.equals(that.toTid))
        return false;
    }

    boolean this_present_roomTid = true && this.isSetRoomTid();
    boolean that_present_roomTid = true && that.isSetRoomTid();
    if (this_present_roomTid || that_present_roomTid) {
      if (!(this_present_roomTid && that_present_roomTid))
        return false;
      if (!this.roomTid.equals(that.roomTid))
        return false;
    }

    boolean this_present_dataBinary = true && this.isSetDataBinary();
    boolean that_present_dataBinary = true && that.isSetDataBinary();
    if (this_present_dataBinary || that_present_dataBinary) {
      if (!(this_present_dataBinary && that_present_dataBinary))
        return false;
      if (!this.dataBinary.equals(that.dataBinary))
        return false;
    }

    boolean this_present_dataString = true && this.isSetDataString();
    boolean that_present_dataString = true && that.isSetDataString();
    if (this_present_dataString || that_present_dataString) {
      if (!(this_present_dataString && that_present_dataString))
        return false;
      if (!this.dataString.equals(that.dataString))
        return false;
    }

    boolean this_present_isOffline = true && this.isSetIsOffline();
    boolean that_present_isOffline = true && that.isSetIsOffline();
    if (this_present_isOffline || that_present_isOffline) {
      if (!(this_present_isOffline && that_present_isOffline))
        return false;
      if (this.isOffline != that.isOffline)
        return false;
    }

    boolean this_present_timestamp = true && this.isSetTimestamp();
    boolean that_present_timestamp = true && that.isSetTimestamp();
    if (this_present_timestamp || that_present_timestamp) {
      if (!(this_present_timestamp && that_present_timestamp))
        return false;
      if (this.timestamp != that.timestamp)
        return false;
    }

    boolean this_present_udtype = true && this.isSetUdtype();
    boolean that_present_udtype = true && that.isSetUdtype();
    if (this_present_udtype || that_present_udtype) {
      if (!(this_present_udtype && that_present_udtype))
        return false;
      if (this.udtype != that.udtype)
        return false;
    }

    boolean this_present_udshow = true && this.isSetUdshow();
    boolean that_present_udshow = true && that.isSetUdshow();
    if (this_present_udshow || that_present_udshow) {
      if (!(this_present_udshow && that_present_udshow))
        return false;
      if (this.udshow != that.udshow)
        return false;
    }

    boolean this_present_extend = true && this.isSetExtend();
    boolean that_present_extend = true && that.isSetExtend();
    if (this_present_extend || that_present_extend) {
      if (!(this_present_extend && that_present_extend))
        return false;
      if (!this.extend.equals(that.extend))
        return false;
    }

    boolean this_present_extra = true && this.isSetExtra();
    boolean that_present_extra = true && that.isSetExtra();
    if (this_present_extra || that_present_extra) {
      if (!(this_present_extra && that_present_extra))
        return false;
      if (!this.extra.equals(that.extra))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + (int) (msType);

    hashCode = hashCode * 8191 + (int) (odType);

    hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
    if (isSetId())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(id);

    hashCode = hashCode * 8191 + ((isSetMid()) ? 131071 : 524287);
    if (isSetMid())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(mid);

    hashCode = hashCode * 8191 + ((isSetBnType()) ? 131071 : 524287);
    if (isSetBnType())
      hashCode = hashCode * 8191 + bnType;

    hashCode = hashCode * 8191 + ((isSetFromTid()) ? 131071 : 524287);
    if (isSetFromTid())
      hashCode = hashCode * 8191 + fromTid.hashCode();

    hashCode = hashCode * 8191 + ((isSetToTid()) ? 131071 : 524287);
    if (isSetToTid())
      hashCode = hashCode * 8191 + toTid.hashCode();

    hashCode = hashCode * 8191 + ((isSetRoomTid()) ? 131071 : 524287);
    if (isSetRoomTid())
      hashCode = hashCode * 8191 + roomTid.hashCode();

    hashCode = hashCode * 8191 + ((isSetDataBinary()) ? 131071 : 524287);
    if (isSetDataBinary())
      hashCode = hashCode * 8191 + dataBinary.hashCode();

    hashCode = hashCode * 8191 + ((isSetDataString()) ? 131071 : 524287);
    if (isSetDataString())
      hashCode = hashCode * 8191 + dataString.hashCode();

    hashCode = hashCode * 8191 + ((isSetIsOffline()) ? 131071 : 524287);
    if (isSetIsOffline())
      hashCode = hashCode * 8191 + ((isOffline) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetTimestamp()) ? 131071 : 524287);
    if (isSetTimestamp())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(timestamp);

    hashCode = hashCode * 8191 + ((isSetUdtype()) ? 131071 : 524287);
    if (isSetUdtype())
      hashCode = hashCode * 8191 + udtype;

    hashCode = hashCode * 8191 + ((isSetUdshow()) ? 131071 : 524287);
    if (isSetUdshow())
      hashCode = hashCode * 8191 + udshow;

    hashCode = hashCode * 8191 + ((isSetExtend()) ? 131071 : 524287);
    if (isSetExtend())
      hashCode = hashCode * 8191 + extend.hashCode();

    hashCode = hashCode * 8191 + ((isSetExtra()) ? 131071 : 524287);
    if (isSetExtra())
      hashCode = hashCode * 8191 + extra.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TimMessage other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetMsType(), other.isSetMsType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMsType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.msType, other.msType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetOdType(), other.isSetOdType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOdType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.odType, other.odType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetId(), other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetMid(), other.isSetMid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mid, other.mid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetBnType(), other.isSetBnType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBnType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bnType, other.bnType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetFromTid(), other.isSetFromTid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFromTid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fromTid, other.fromTid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetToTid(), other.isSetToTid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetToTid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.toTid, other.toTid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetRoomTid(), other.isSetRoomTid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRoomTid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.roomTid, other.roomTid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDataBinary(), other.isSetDataBinary());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDataBinary()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataBinary, other.dataBinary);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDataString(), other.isSetDataString());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDataString()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataString, other.dataString);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetIsOffline(), other.isSetIsOffline());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsOffline()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isOffline, other.isOffline);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTimestamp(), other.isSetTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, other.timestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetUdtype(), other.isSetUdtype());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUdtype()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.udtype, other.udtype);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetUdshow(), other.isSetUdshow());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUdshow()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.udshow, other.udshow);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetExtend(), other.isSetExtend());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExtend()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extend, other.extend);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetExtra(), other.isSetExtra());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExtra()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extra, other.extra);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TimMessage(");
    boolean first = true;

    sb.append("msType:");
    sb.append(this.msType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("odType:");
    sb.append(this.odType);
    first = false;
    if (isSetId()) {
      if (!first) sb.append(", ");
      sb.append("id:");
      sb.append(this.id);
      first = false;
    }
    if (isSetMid()) {
      if (!first) sb.append(", ");
      sb.append("mid:");
      sb.append(this.mid);
      first = false;
    }
    if (isSetBnType()) {
      if (!first) sb.append(", ");
      sb.append("bnType:");
      sb.append(this.bnType);
      first = false;
    }
    if (isSetFromTid()) {
      if (!first) sb.append(", ");
      sb.append("fromTid:");
      if (this.fromTid == null) {
        sb.append("null");
      } else {
        sb.append(this.fromTid);
      }
      first = false;
    }
    if (isSetToTid()) {
      if (!first) sb.append(", ");
      sb.append("toTid:");
      if (this.toTid == null) {
        sb.append("null");
      } else {
        sb.append(this.toTid);
      }
      first = false;
    }
    if (isSetRoomTid()) {
      if (!first) sb.append(", ");
      sb.append("roomTid:");
      if (this.roomTid == null) {
        sb.append("null");
      } else {
        sb.append(this.roomTid);
      }
      first = false;
    }
    if (isSetDataBinary()) {
      if (!first) sb.append(", ");
      sb.append("dataBinary:");
      if (this.dataBinary == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.dataBinary, sb);
      }
      first = false;
    }
    if (isSetDataString()) {
      if (!first) sb.append(", ");
      sb.append("dataString:");
      if (this.dataString == null) {
        sb.append("null");
      } else {
        sb.append(this.dataString);
      }
      first = false;
    }
    if (isSetIsOffline()) {
      if (!first) sb.append(", ");
      sb.append("isOffline:");
      sb.append(this.isOffline);
      first = false;
    }
    if (isSetTimestamp()) {
      if (!first) sb.append(", ");
      sb.append("timestamp:");
      sb.append(this.timestamp);
      first = false;
    }
    if (isSetUdtype()) {
      if (!first) sb.append(", ");
      sb.append("udtype:");
      sb.append(this.udtype);
      first = false;
    }
    if (isSetUdshow()) {
      if (!first) sb.append(", ");
      sb.append("udshow:");
      sb.append(this.udshow);
      first = false;
    }
    if (isSetExtend()) {
      if (!first) sb.append(", ");
      sb.append("extend:");
      if (this.extend == null) {
        sb.append("null");
      } else {
        sb.append(this.extend);
      }
      first = false;
    }
    if (isSetExtra()) {
      if (!first) sb.append(", ");
      sb.append("extra:");
      if (this.extra == null) {
        sb.append("null");
      } else {
        sb.append(this.extra);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'msType' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'odType' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
    if (fromTid != null) {
      fromTid.validate();
    }
    if (toTid != null) {
      toTid.validate();
    }
    if (roomTid != null) {
      roomTid.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TimMessageStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TimMessageStandardScheme getScheme() {
      return new TimMessageStandardScheme();
    }
  }

  private static class TimMessageStandardScheme extends org.apache.thrift.scheme.StandardScheme<TimMessage> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TimMessage struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MS_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.msType = iprot.readByte();
              struct.setMsTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // OD_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.odType = iprot.readByte();
              struct.setOdTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.mid = iprot.readI64();
              struct.setMidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // BN_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.bnType = iprot.readI32();
              struct.setBnTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // FROM_TID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.fromTid = new Tid();
              struct.fromTid.read(iprot);
              struct.setFromTidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TO_TID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.toTid = new Tid();
              struct.toTid.read(iprot);
              struct.setToTidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ROOM_TID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.roomTid = new Tid();
              struct.roomTid.read(iprot);
              struct.setRoomTidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // DATA_BINARY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.dataBinary = iprot.readBinary();
              struct.setDataBinaryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // DATA_STRING
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.dataString = iprot.readString();
              struct.setDataStringIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // IS_OFFLINE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isOffline = iprot.readBool();
              struct.setIsOfflineIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.timestamp = iprot.readI64();
              struct.setTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // UDTYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.udtype = iprot.readI16();
              struct.setUdtypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // UDSHOW
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.udshow = iprot.readI16();
              struct.setUdshowIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // EXTEND
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map104 = iprot.readMapBegin();
                struct.extend = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map104.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _key105;
                @org.apache.thrift.annotation.Nullable java.lang.String _val106;
                for (int _i107 = 0; _i107 < _map104.size; ++_i107)
                {
                  _key105 = iprot.readString();
                  _val106 = iprot.readString();
                  struct.extend.put(_key105, _val106);
                }
                iprot.readMapEnd();
              }
              struct.setExtendIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // EXTRA
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map108 = iprot.readMapBegin();
                struct.extra = new java.util.HashMap<java.lang.String,java.nio.ByteBuffer>(2*_map108.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _key109;
                @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer _val110;
                for (int _i111 = 0; _i111 < _map108.size; ++_i111)
                {
                  _key109 = iprot.readString();
                  _val110 = iprot.readBinary();
                  struct.extra.put(_key109, _val110);
                }
                iprot.readMapEnd();
              }
              struct.setExtraIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetMsType()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'msType' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetOdType()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'odType' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TimMessage struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(MS_TYPE_FIELD_DESC);
      oprot.writeByte(struct.msType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OD_TYPE_FIELD_DESC);
      oprot.writeByte(struct.odType);
      oprot.writeFieldEnd();
      if (struct.isSetId()) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI64(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMid()) {
        oprot.writeFieldBegin(MID_FIELD_DESC);
        oprot.writeI64(struct.mid);
        oprot.writeFieldEnd();
      }
      if (struct.isSetBnType()) {
        oprot.writeFieldBegin(BN_TYPE_FIELD_DESC);
        oprot.writeI32(struct.bnType);
        oprot.writeFieldEnd();
      }
      if (struct.fromTid != null) {
        if (struct.isSetFromTid()) {
          oprot.writeFieldBegin(FROM_TID_FIELD_DESC);
          struct.fromTid.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.toTid != null) {
        if (struct.isSetToTid()) {
          oprot.writeFieldBegin(TO_TID_FIELD_DESC);
          struct.toTid.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.roomTid != null) {
        if (struct.isSetRoomTid()) {
          oprot.writeFieldBegin(ROOM_TID_FIELD_DESC);
          struct.roomTid.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.dataBinary != null) {
        if (struct.isSetDataBinary()) {
          oprot.writeFieldBegin(DATA_BINARY_FIELD_DESC);
          oprot.writeBinary(struct.dataBinary);
          oprot.writeFieldEnd();
        }
      }
      if (struct.dataString != null) {
        if (struct.isSetDataString()) {
          oprot.writeFieldBegin(DATA_STRING_FIELD_DESC);
          oprot.writeString(struct.dataString);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIsOffline()) {
        oprot.writeFieldBegin(IS_OFFLINE_FIELD_DESC);
        oprot.writeBool(struct.isOffline);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTimestamp()) {
        oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
        oprot.writeI64(struct.timestamp);
        oprot.writeFieldEnd();
      }
      if (struct.isSetUdtype()) {
        oprot.writeFieldBegin(UDTYPE_FIELD_DESC);
        oprot.writeI16(struct.udtype);
        oprot.writeFieldEnd();
      }
      if (struct.isSetUdshow()) {
        oprot.writeFieldBegin(UDSHOW_FIELD_DESC);
        oprot.writeI16(struct.udshow);
        oprot.writeFieldEnd();
      }
      if (struct.extend != null) {
        if (struct.isSetExtend()) {
          oprot.writeFieldBegin(EXTEND_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.extend.size()));
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter112 : struct.extend.entrySet())
            {
              oprot.writeString(_iter112.getKey());
              oprot.writeString(_iter112.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.extra != null) {
        if (struct.isSetExtra()) {
          oprot.writeFieldBegin(EXTRA_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.extra.size()));
            for (java.util.Map.Entry<java.lang.String, java.nio.ByteBuffer> _iter113 : struct.extra.entrySet())
            {
              oprot.writeString(_iter113.getKey());
              oprot.writeBinary(_iter113.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TimMessageTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TimMessageTupleScheme getScheme() {
      return new TimMessageTupleScheme();
    }
  }

  private static class TimMessageTupleScheme extends org.apache.thrift.scheme.TupleScheme<TimMessage> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TimMessage struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeByte(struct.msType);
      oprot.writeByte(struct.odType);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetMid()) {
        optionals.set(1);
      }
      if (struct.isSetBnType()) {
        optionals.set(2);
      }
      if (struct.isSetFromTid()) {
        optionals.set(3);
      }
      if (struct.isSetToTid()) {
        optionals.set(4);
      }
      if (struct.isSetRoomTid()) {
        optionals.set(5);
      }
      if (struct.isSetDataBinary()) {
        optionals.set(6);
      }
      if (struct.isSetDataString()) {
        optionals.set(7);
      }
      if (struct.isSetIsOffline()) {
        optionals.set(8);
      }
      if (struct.isSetTimestamp()) {
        optionals.set(9);
      }
      if (struct.isSetUdtype()) {
        optionals.set(10);
      }
      if (struct.isSetUdshow()) {
        optionals.set(11);
      }
      if (struct.isSetExtend()) {
        optionals.set(12);
      }
      if (struct.isSetExtra()) {
        optionals.set(13);
      }
      oprot.writeBitSet(optionals, 14);
      if (struct.isSetId()) {
        oprot.writeI64(struct.id);
      }
      if (struct.isSetMid()) {
        oprot.writeI64(struct.mid);
      }
      if (struct.isSetBnType()) {
        oprot.writeI32(struct.bnType);
      }
      if (struct.isSetFromTid()) {
        struct.fromTid.write(oprot);
      }
      if (struct.isSetToTid()) {
        struct.toTid.write(oprot);
      }
      if (struct.isSetRoomTid()) {
        struct.roomTid.write(oprot);
      }
      if (struct.isSetDataBinary()) {
        oprot.writeBinary(struct.dataBinary);
      }
      if (struct.isSetDataString()) {
        oprot.writeString(struct.dataString);
      }
      if (struct.isSetIsOffline()) {
        oprot.writeBool(struct.isOffline);
      }
      if (struct.isSetTimestamp()) {
        oprot.writeI64(struct.timestamp);
      }
      if (struct.isSetUdtype()) {
        oprot.writeI16(struct.udtype);
      }
      if (struct.isSetUdshow()) {
        oprot.writeI16(struct.udshow);
      }
      if (struct.isSetExtend()) {
        {
          oprot.writeI32(struct.extend.size());
          for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter114 : struct.extend.entrySet())
          {
            oprot.writeString(_iter114.getKey());
            oprot.writeString(_iter114.getValue());
          }
        }
      }
      if (struct.isSetExtra()) {
        {
          oprot.writeI32(struct.extra.size());
          for (java.util.Map.Entry<java.lang.String, java.nio.ByteBuffer> _iter115 : struct.extra.entrySet())
          {
            oprot.writeString(_iter115.getKey());
            oprot.writeBinary(_iter115.getValue());
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TimMessage struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.msType = iprot.readByte();
      struct.setMsTypeIsSet(true);
      struct.odType = iprot.readByte();
      struct.setOdTypeIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(14);
      if (incoming.get(0)) {
        struct.id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.mid = iprot.readI64();
        struct.setMidIsSet(true);
      }
      if (incoming.get(2)) {
        struct.bnType = iprot.readI32();
        struct.setBnTypeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.fromTid = new Tid();
        struct.fromTid.read(iprot);
        struct.setFromTidIsSet(true);
      }
      if (incoming.get(4)) {
        struct.toTid = new Tid();
        struct.toTid.read(iprot);
        struct.setToTidIsSet(true);
      }
      if (incoming.get(5)) {
        struct.roomTid = new Tid();
        struct.roomTid.read(iprot);
        struct.setRoomTidIsSet(true);
      }
      if (incoming.get(6)) {
        struct.dataBinary = iprot.readBinary();
        struct.setDataBinaryIsSet(true);
      }
      if (incoming.get(7)) {
        struct.dataString = iprot.readString();
        struct.setDataStringIsSet(true);
      }
      if (incoming.get(8)) {
        struct.isOffline = iprot.readBool();
        struct.setIsOfflineIsSet(true);
      }
      if (incoming.get(9)) {
        struct.timestamp = iprot.readI64();
        struct.setTimestampIsSet(true);
      }
      if (incoming.get(10)) {
        struct.udtype = iprot.readI16();
        struct.setUdtypeIsSet(true);
      }
      if (incoming.get(11)) {
        struct.udshow = iprot.readI16();
        struct.setUdshowIsSet(true);
      }
      if (incoming.get(12)) {
        {
          org.apache.thrift.protocol.TMap _map116 = iprot.readMapBegin(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING); 
          struct.extend = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map116.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _key117;
          @org.apache.thrift.annotation.Nullable java.lang.String _val118;
          for (int _i119 = 0; _i119 < _map116.size; ++_i119)
          {
            _key117 = iprot.readString();
            _val118 = iprot.readString();
            struct.extend.put(_key117, _val118);
          }
        }
        struct.setExtendIsSet(true);
      }
      if (incoming.get(13)) {
        {
          org.apache.thrift.protocol.TMap _map120 = iprot.readMapBegin(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING); 
          struct.extra = new java.util.HashMap<java.lang.String,java.nio.ByteBuffer>(2*_map120.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _key121;
          @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer _val122;
          for (int _i123 = 0; _i123 < _map120.size; ++_i123)
          {
            _key121 = iprot.readString();
            _val122 = iprot.readBinary();
            struct.extra.put(_key121, _val122);
          }
        }
        struct.setExtraIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

