/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package io.github.donnie4w.tim.stub;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.18.1)", date = "2023-12-03")
public class TimUserBean implements org.apache.thrift.TBase<TimUserBean, TimUserBean._Fields>, java.io.Serializable, Cloneable, Comparable<TimUserBean> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TimUserBean");

  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField NICK_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("nickName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField BRITHDAY_FIELD_DESC = new org.apache.thrift.protocol.TField("brithday", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField GENDER_FIELD_DESC = new org.apache.thrift.protocol.TField("gender", org.apache.thrift.protocol.TType.BYTE, (short)5);
  private static final org.apache.thrift.protocol.TField COVER_FIELD_DESC = new org.apache.thrift.protocol.TField("cover", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField AREA_FIELD_DESC = new org.apache.thrift.protocol.TField("area", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField CREATETIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createtime", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField PHOTO_TID_ALBUM_FIELD_DESC = new org.apache.thrift.protocol.TField("photoTidAlbum", org.apache.thrift.protocol.TType.LIST, (short)9);
  private static final org.apache.thrift.protocol.TField EXTEND_FIELD_DESC = new org.apache.thrift.protocol.TField("extend", org.apache.thrift.protocol.TType.MAP, (short)10);
  private static final org.apache.thrift.protocol.TField EXTRA_FIELD_DESC = new org.apache.thrift.protocol.TField("extra", org.apache.thrift.protocol.TType.MAP, (short)11);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TimUserBeanStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TimUserBeanTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String name; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String nickName; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String brithday; // optional
  public byte gender; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String cover; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String area; // optional
  public long createtime; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> photoTidAlbum; // optional
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> extend; // optional
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.nio.ByteBuffer> extra; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NAME((short)1, "name"),
    NICK_NAME((short)2, "nickName"),
    BRITHDAY((short)4, "brithday"),
    GENDER((short)5, "gender"),
    COVER((short)6, "cover"),
    AREA((short)7, "area"),
    CREATETIME((short)8, "createtime"),
    PHOTO_TID_ALBUM((short)9, "photoTidAlbum"),
    EXTEND((short)10, "extend"),
    EXTRA((short)11, "extra");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NAME
          return NAME;
        case 2: // NICK_NAME
          return NICK_NAME;
        case 4: // BRITHDAY
          return BRITHDAY;
        case 5: // GENDER
          return GENDER;
        case 6: // COVER
          return COVER;
        case 7: // AREA
          return AREA;
        case 8: // CREATETIME
          return CREATETIME;
        case 9: // PHOTO_TID_ALBUM
          return PHOTO_TID_ALBUM;
        case 10: // EXTEND
          return EXTEND;
        case 11: // EXTRA
          return EXTRA;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __GENDER_ISSET_ID = 0;
  private static final int __CREATETIME_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.NAME,_Fields.NICK_NAME,_Fields.BRITHDAY,_Fields.GENDER,_Fields.COVER,_Fields.AREA,_Fields.CREATETIME,_Fields.PHOTO_TID_ALBUM,_Fields.EXTEND,_Fields.EXTRA};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NICK_NAME, new org.apache.thrift.meta_data.FieldMetaData("nickName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BRITHDAY, new org.apache.thrift.meta_data.FieldMetaData("brithday", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GENDER, new org.apache.thrift.meta_data.FieldMetaData("gender", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.COVER, new org.apache.thrift.meta_data.FieldMetaData("cover", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AREA, new org.apache.thrift.meta_data.FieldMetaData("area", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATETIME, new org.apache.thrift.meta_data.FieldMetaData("createtime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PHOTO_TID_ALBUM, new org.apache.thrift.meta_data.FieldMetaData("photoTidAlbum", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.EXTEND, new org.apache.thrift.meta_data.FieldMetaData("extend", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.EXTRA, new org.apache.thrift.meta_data.FieldMetaData("extra", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING            , true))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TimUserBean.class, metaDataMap);
  }

  public TimUserBean() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TimUserBean(TimUserBean other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetNickName()) {
      this.nickName = other.nickName;
    }
    if (other.isSetBrithday()) {
      this.brithday = other.brithday;
    }
    this.gender = other.gender;
    if (other.isSetCover()) {
      this.cover = other.cover;
    }
    if (other.isSetArea()) {
      this.area = other.area;
    }
    this.createtime = other.createtime;
    if (other.isSetPhotoTidAlbum()) {
      java.util.List<java.lang.String> __this__photoTidAlbum = new java.util.ArrayList<java.lang.String>(other.photoTidAlbum);
      this.photoTidAlbum = __this__photoTidAlbum;
    }
    if (other.isSetExtend()) {
      java.util.Map<java.lang.String,java.lang.String> __this__extend = new java.util.HashMap<java.lang.String,java.lang.String>(other.extend);
      this.extend = __this__extend;
    }
    if (other.isSetExtra()) {
      java.util.Map<java.lang.String,java.nio.ByteBuffer> __this__extra = new java.util.HashMap<java.lang.String,java.nio.ByteBuffer>(other.extra);
      this.extra = __this__extra;
    }
  }

  @Override
  public TimUserBean deepCopy() {
    return new TimUserBean(this);
  }

  @Override
  public void clear() {
    this.name = null;
    this.nickName = null;
    this.brithday = null;
    setGenderIsSet(false);
    this.gender = 0;
    this.cover = null;
    this.area = null;
    setCreatetimeIsSet(false);
    this.createtime = 0;
    this.photoTidAlbum = null;
    this.extend = null;
    this.extra = null;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getName() {
    return this.name;
  }

  public TimUserBean setName(@org.apache.thrift.annotation.Nullable java.lang.String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getNickName() {
    return this.nickName;
  }

  public TimUserBean setNickName(@org.apache.thrift.annotation.Nullable java.lang.String nickName) {
    this.nickName = nickName;
    return this;
  }

  public void unsetNickName() {
    this.nickName = null;
  }

  /** Returns true if field nickName is set (has been assigned a value) and false otherwise */
  public boolean isSetNickName() {
    return this.nickName != null;
  }

  public void setNickNameIsSet(boolean value) {
    if (!value) {
      this.nickName = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getBrithday() {
    return this.brithday;
  }

  public TimUserBean setBrithday(@org.apache.thrift.annotation.Nullable java.lang.String brithday) {
    this.brithday = brithday;
    return this;
  }

  public void unsetBrithday() {
    this.brithday = null;
  }

  /** Returns true if field brithday is set (has been assigned a value) and false otherwise */
  public boolean isSetBrithday() {
    return this.brithday != null;
  }

  public void setBrithdayIsSet(boolean value) {
    if (!value) {
      this.brithday = null;
    }
  }

  public byte getGender() {
    return this.gender;
  }

  public TimUserBean setGender(byte gender) {
    this.gender = gender;
    setGenderIsSet(true);
    return this;
  }

  public void unsetGender() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __GENDER_ISSET_ID);
  }

  /** Returns true if field gender is set (has been assigned a value) and false otherwise */
  public boolean isSetGender() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __GENDER_ISSET_ID);
  }

  public void setGenderIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __GENDER_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getCover() {
    return this.cover;
  }

  public TimUserBean setCover(@org.apache.thrift.annotation.Nullable java.lang.String cover) {
    this.cover = cover;
    return this;
  }

  public void unsetCover() {
    this.cover = null;
  }

  /** Returns true if field cover is set (has been assigned a value) and false otherwise */
  public boolean isSetCover() {
    return this.cover != null;
  }

  public void setCoverIsSet(boolean value) {
    if (!value) {
      this.cover = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getArea() {
    return this.area;
  }

  public TimUserBean setArea(@org.apache.thrift.annotation.Nullable java.lang.String area) {
    this.area = area;
    return this;
  }

  public void unsetArea() {
    this.area = null;
  }

  /** Returns true if field area is set (has been assigned a value) and false otherwise */
  public boolean isSetArea() {
    return this.area != null;
  }

  public void setAreaIsSet(boolean value) {
    if (!value) {
      this.area = null;
    }
  }

  public long getCreatetime() {
    return this.createtime;
  }

  public TimUserBean setCreatetime(long createtime) {
    this.createtime = createtime;
    setCreatetimeIsSet(true);
    return this;
  }

  public void unsetCreatetime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  /** Returns true if field createtime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreatetime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  public void setCreatetimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CREATETIME_ISSET_ID, value);
  }

  public int getPhotoTidAlbumSize() {
    return (this.photoTidAlbum == null) ? 0 : this.photoTidAlbum.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.String> getPhotoTidAlbumIterator() {
    return (this.photoTidAlbum == null) ? null : this.photoTidAlbum.iterator();
  }

  public void addToPhotoTidAlbum(java.lang.String elem) {
    if (this.photoTidAlbum == null) {
      this.photoTidAlbum = new java.util.ArrayList<java.lang.String>();
    }
    this.photoTidAlbum.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.String> getPhotoTidAlbum() {
    return this.photoTidAlbum;
  }

  public TimUserBean setPhotoTidAlbum(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> photoTidAlbum) {
    this.photoTidAlbum = photoTidAlbum;
    return this;
  }

  public void unsetPhotoTidAlbum() {
    this.photoTidAlbum = null;
  }

  /** Returns true if field photoTidAlbum is set (has been assigned a value) and false otherwise */
  public boolean isSetPhotoTidAlbum() {
    return this.photoTidAlbum != null;
  }

  public void setPhotoTidAlbumIsSet(boolean value) {
    if (!value) {
      this.photoTidAlbum = null;
    }
  }

  public int getExtendSize() {
    return (this.extend == null) ? 0 : this.extend.size();
  }

  public void putToExtend(java.lang.String key, java.lang.String val) {
    if (this.extend == null) {
      this.extend = new java.util.HashMap<java.lang.String,java.lang.String>();
    }
    this.extend.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.String,java.lang.String> getExtend() {
    return this.extend;
  }

  public TimUserBean setExtend(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> extend) {
    this.extend = extend;
    return this;
  }

  public void unsetExtend() {
    this.extend = null;
  }

  /** Returns true if field extend is set (has been assigned a value) and false otherwise */
  public boolean isSetExtend() {
    return this.extend != null;
  }

  public void setExtendIsSet(boolean value) {
    if (!value) {
      this.extend = null;
    }
  }

  public int getExtraSize() {
    return (this.extra == null) ? 0 : this.extra.size();
  }

  public void putToExtra(java.lang.String key, java.nio.ByteBuffer val) {
    if (this.extra == null) {
      this.extra = new java.util.HashMap<java.lang.String,java.nio.ByteBuffer>();
    }
    this.extra.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.String,java.nio.ByteBuffer> getExtra() {
    return this.extra;
  }

  public TimUserBean setExtra(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.nio.ByteBuffer> extra) {
    this.extra = extra;
    return this;
  }

  public void unsetExtra() {
    this.extra = null;
  }

  /** Returns true if field extra is set (has been assigned a value) and false otherwise */
  public boolean isSetExtra() {
    return this.extra != null;
  }

  public void setExtraIsSet(boolean value) {
    if (!value) {
      this.extra = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((java.lang.String)value);
      }
      break;

    case NICK_NAME:
      if (value == null) {
        unsetNickName();
      } else {
        setNickName((java.lang.String)value);
      }
      break;

    case BRITHDAY:
      if (value == null) {
        unsetBrithday();
      } else {
        setBrithday((java.lang.String)value);
      }
      break;

    case GENDER:
      if (value == null) {
        unsetGender();
      } else {
        setGender((java.lang.Byte)value);
      }
      break;

    case COVER:
      if (value == null) {
        unsetCover();
      } else {
        setCover((java.lang.String)value);
      }
      break;

    case AREA:
      if (value == null) {
        unsetArea();
      } else {
        setArea((java.lang.String)value);
      }
      break;

    case CREATETIME:
      if (value == null) {
        unsetCreatetime();
      } else {
        setCreatetime((java.lang.Long)value);
      }
      break;

    case PHOTO_TID_ALBUM:
      if (value == null) {
        unsetPhotoTidAlbum();
      } else {
        setPhotoTidAlbum((java.util.List<java.lang.String>)value);
      }
      break;

    case EXTEND:
      if (value == null) {
        unsetExtend();
      } else {
        setExtend((java.util.Map<java.lang.String,java.lang.String>)value);
      }
      break;

    case EXTRA:
      if (value == null) {
        unsetExtra();
      } else {
        setExtra((java.util.Map<java.lang.String,java.nio.ByteBuffer>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case NAME:
      return getName();

    case NICK_NAME:
      return getNickName();

    case BRITHDAY:
      return getBrithday();

    case GENDER:
      return getGender();

    case COVER:
      return getCover();

    case AREA:
      return getArea();

    case CREATETIME:
      return getCreatetime();

    case PHOTO_TID_ALBUM:
      return getPhotoTidAlbum();

    case EXTEND:
      return getExtend();

    case EXTRA:
      return getExtra();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case NAME:
      return isSetName();
    case NICK_NAME:
      return isSetNickName();
    case BRITHDAY:
      return isSetBrithday();
    case GENDER:
      return isSetGender();
    case COVER:
      return isSetCover();
    case AREA:
      return isSetArea();
    case CREATETIME:
      return isSetCreatetime();
    case PHOTO_TID_ALBUM:
      return isSetPhotoTidAlbum();
    case EXTEND:
      return isSetExtend();
    case EXTRA:
      return isSetExtra();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TimUserBean)
      return this.equals((TimUserBean)that);
    return false;
  }

  public boolean equals(TimUserBean that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_nickName = true && this.isSetNickName();
    boolean that_present_nickName = true && that.isSetNickName();
    if (this_present_nickName || that_present_nickName) {
      if (!(this_present_nickName && that_present_nickName))
        return false;
      if (!this.nickName.equals(that.nickName))
        return false;
    }

    boolean this_present_brithday = true && this.isSetBrithday();
    boolean that_present_brithday = true && that.isSetBrithday();
    if (this_present_brithday || that_present_brithday) {
      if (!(this_present_brithday && that_present_brithday))
        return false;
      if (!this.brithday.equals(that.brithday))
        return false;
    }

    boolean this_present_gender = true && this.isSetGender();
    boolean that_present_gender = true && that.isSetGender();
    if (this_present_gender || that_present_gender) {
      if (!(this_present_gender && that_present_gender))
        return false;
      if (this.gender != that.gender)
        return false;
    }

    boolean this_present_cover = true && this.isSetCover();
    boolean that_present_cover = true && that.isSetCover();
    if (this_present_cover || that_present_cover) {
      if (!(this_present_cover && that_present_cover))
        return false;
      if (!this.cover.equals(that.cover))
        return false;
    }

    boolean this_present_area = true && this.isSetArea();
    boolean that_present_area = true && that.isSetArea();
    if (this_present_area || that_present_area) {
      if (!(this_present_area && that_present_area))
        return false;
      if (!this.area.equals(that.area))
        return false;
    }

    boolean this_present_createtime = true && this.isSetCreatetime();
    boolean that_present_createtime = true && that.isSetCreatetime();
    if (this_present_createtime || that_present_createtime) {
      if (!(this_present_createtime && that_present_createtime))
        return false;
      if (this.createtime != that.createtime)
        return false;
    }

    boolean this_present_photoTidAlbum = true && this.isSetPhotoTidAlbum();
    boolean that_present_photoTidAlbum = true && that.isSetPhotoTidAlbum();
    if (this_present_photoTidAlbum || that_present_photoTidAlbum) {
      if (!(this_present_photoTidAlbum && that_present_photoTidAlbum))
        return false;
      if (!this.photoTidAlbum.equals(that.photoTidAlbum))
        return false;
    }

    boolean this_present_extend = true && this.isSetExtend();
    boolean that_present_extend = true && that.isSetExtend();
    if (this_present_extend || that_present_extend) {
      if (!(this_present_extend && that_present_extend))
        return false;
      if (!this.extend.equals(that.extend))
        return false;
    }

    boolean this_present_extra = true && this.isSetExtra();
    boolean that_present_extra = true && that.isSetExtra();
    if (this_present_extra || that_present_extra) {
      if (!(this_present_extra && that_present_extra))
        return false;
      if (!this.extra.equals(that.extra))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
    if (isSetName())
      hashCode = hashCode * 8191 + name.hashCode();

    hashCode = hashCode * 8191 + ((isSetNickName()) ? 131071 : 524287);
    if (isSetNickName())
      hashCode = hashCode * 8191 + nickName.hashCode();

    hashCode = hashCode * 8191 + ((isSetBrithday()) ? 131071 : 524287);
    if (isSetBrithday())
      hashCode = hashCode * 8191 + brithday.hashCode();

    hashCode = hashCode * 8191 + ((isSetGender()) ? 131071 : 524287);
    if (isSetGender())
      hashCode = hashCode * 8191 + (int) (gender);

    hashCode = hashCode * 8191 + ((isSetCover()) ? 131071 : 524287);
    if (isSetCover())
      hashCode = hashCode * 8191 + cover.hashCode();

    hashCode = hashCode * 8191 + ((isSetArea()) ? 131071 : 524287);
    if (isSetArea())
      hashCode = hashCode * 8191 + area.hashCode();

    hashCode = hashCode * 8191 + ((isSetCreatetime()) ? 131071 : 524287);
    if (isSetCreatetime())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(createtime);

    hashCode = hashCode * 8191 + ((isSetPhotoTidAlbum()) ? 131071 : 524287);
    if (isSetPhotoTidAlbum())
      hashCode = hashCode * 8191 + photoTidAlbum.hashCode();

    hashCode = hashCode * 8191 + ((isSetExtend()) ? 131071 : 524287);
    if (isSetExtend())
      hashCode = hashCode * 8191 + extend.hashCode();

    hashCode = hashCode * 8191 + ((isSetExtra()) ? 131071 : 524287);
    if (isSetExtra())
      hashCode = hashCode * 8191 + extra.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TimUserBean other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetName(), other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetNickName(), other.isSetNickName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNickName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nickName, other.nickName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetBrithday(), other.isSetBrithday());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBrithday()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.brithday, other.brithday);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetGender(), other.isSetGender());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGender()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gender, other.gender);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCover(), other.isSetCover());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCover()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cover, other.cover);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetArea(), other.isSetArea());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetArea()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.area, other.area);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCreatetime(), other.isSetCreatetime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreatetime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createtime, other.createtime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPhotoTidAlbum(), other.isSetPhotoTidAlbum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPhotoTidAlbum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.photoTidAlbum, other.photoTidAlbum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetExtend(), other.isSetExtend());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExtend()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extend, other.extend);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetExtra(), other.isSetExtra());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExtra()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extra, other.extra);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TimUserBean(");
    boolean first = true;

    if (isSetName()) {
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
    }
    if (isSetNickName()) {
      if (!first) sb.append(", ");
      sb.append("nickName:");
      if (this.nickName == null) {
        sb.append("null");
      } else {
        sb.append(this.nickName);
      }
      first = false;
    }
    if (isSetBrithday()) {
      if (!first) sb.append(", ");
      sb.append("brithday:");
      if (this.brithday == null) {
        sb.append("null");
      } else {
        sb.append(this.brithday);
      }
      first = false;
    }
    if (isSetGender()) {
      if (!first) sb.append(", ");
      sb.append("gender:");
      sb.append(this.gender);
      first = false;
    }
    if (isSetCover()) {
      if (!first) sb.append(", ");
      sb.append("cover:");
      if (this.cover == null) {
        sb.append("null");
      } else {
        sb.append(this.cover);
      }
      first = false;
    }
    if (isSetArea()) {
      if (!first) sb.append(", ");
      sb.append("area:");
      if (this.area == null) {
        sb.append("null");
      } else {
        sb.append(this.area);
      }
      first = false;
    }
    if (isSetCreatetime()) {
      if (!first) sb.append(", ");
      sb.append("createtime:");
      sb.append(this.createtime);
      first = false;
    }
    if (isSetPhotoTidAlbum()) {
      if (!first) sb.append(", ");
      sb.append("photoTidAlbum:");
      if (this.photoTidAlbum == null) {
        sb.append("null");
      } else {
        sb.append(this.photoTidAlbum);
      }
      first = false;
    }
    if (isSetExtend()) {
      if (!first) sb.append(", ");
      sb.append("extend:");
      if (this.extend == null) {
        sb.append("null");
      } else {
        sb.append(this.extend);
      }
      first = false;
    }
    if (isSetExtra()) {
      if (!first) sb.append(", ");
      sb.append("extra:");
      if (this.extra == null) {
        sb.append("null");
      } else {
        sb.append(this.extra);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TimUserBeanStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TimUserBeanStandardScheme getScheme() {
      return new TimUserBeanStandardScheme();
    }
  }

  private static class TimUserBeanStandardScheme extends org.apache.thrift.scheme.StandardScheme<TimUserBean> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TimUserBean struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NICK_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.nickName = iprot.readString();
              struct.setNickNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // BRITHDAY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.brithday = iprot.readString();
              struct.setBrithdayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // GENDER
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.gender = iprot.readByte();
              struct.setGenderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // COVER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cover = iprot.readString();
              struct.setCoverIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // AREA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.area = iprot.readString();
              struct.setAreaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CREATETIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createtime = iprot.readI64();
              struct.setCreatetimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // PHOTO_TID_ALBUM
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list10 = iprot.readListBegin();
                struct.photoTidAlbum = new java.util.ArrayList<java.lang.String>(_list10.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _elem11;
                for (int _i12 = 0; _i12 < _list10.size; ++_i12)
                {
                  _elem11 = iprot.readString();
                  struct.photoTidAlbum.add(_elem11);
                }
                iprot.readListEnd();
              }
              struct.setPhotoTidAlbumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // EXTEND
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map13 = iprot.readMapBegin();
                struct.extend = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map13.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _key14;
                @org.apache.thrift.annotation.Nullable java.lang.String _val15;
                for (int _i16 = 0; _i16 < _map13.size; ++_i16)
                {
                  _key14 = iprot.readString();
                  _val15 = iprot.readString();
                  struct.extend.put(_key14, _val15);
                }
                iprot.readMapEnd();
              }
              struct.setExtendIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // EXTRA
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map17 = iprot.readMapBegin();
                struct.extra = new java.util.HashMap<java.lang.String,java.nio.ByteBuffer>(2*_map17.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _key18;
                @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer _val19;
                for (int _i20 = 0; _i20 < _map17.size; ++_i20)
                {
                  _key18 = iprot.readString();
                  _val19 = iprot.readBinary();
                  struct.extra.put(_key18, _val19);
                }
                iprot.readMapEnd();
              }
              struct.setExtraIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TimUserBean struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.name != null) {
        if (struct.isSetName()) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.nickName != null) {
        if (struct.isSetNickName()) {
          oprot.writeFieldBegin(NICK_NAME_FIELD_DESC);
          oprot.writeString(struct.nickName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.brithday != null) {
        if (struct.isSetBrithday()) {
          oprot.writeFieldBegin(BRITHDAY_FIELD_DESC);
          oprot.writeString(struct.brithday);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetGender()) {
        oprot.writeFieldBegin(GENDER_FIELD_DESC);
        oprot.writeByte(struct.gender);
        oprot.writeFieldEnd();
      }
      if (struct.cover != null) {
        if (struct.isSetCover()) {
          oprot.writeFieldBegin(COVER_FIELD_DESC);
          oprot.writeString(struct.cover);
          oprot.writeFieldEnd();
        }
      }
      if (struct.area != null) {
        if (struct.isSetArea()) {
          oprot.writeFieldBegin(AREA_FIELD_DESC);
          oprot.writeString(struct.area);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetCreatetime()) {
        oprot.writeFieldBegin(CREATETIME_FIELD_DESC);
        oprot.writeI64(struct.createtime);
        oprot.writeFieldEnd();
      }
      if (struct.photoTidAlbum != null) {
        if (struct.isSetPhotoTidAlbum()) {
          oprot.writeFieldBegin(PHOTO_TID_ALBUM_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.photoTidAlbum.size()));
            for (java.lang.String _iter21 : struct.photoTidAlbum)
            {
              oprot.writeString(_iter21);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.extend != null) {
        if (struct.isSetExtend()) {
          oprot.writeFieldBegin(EXTEND_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.extend.size()));
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter22 : struct.extend.entrySet())
            {
              oprot.writeString(_iter22.getKey());
              oprot.writeString(_iter22.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.extra != null) {
        if (struct.isSetExtra()) {
          oprot.writeFieldBegin(EXTRA_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.extra.size()));
            for (java.util.Map.Entry<java.lang.String, java.nio.ByteBuffer> _iter23 : struct.extra.entrySet())
            {
              oprot.writeString(_iter23.getKey());
              oprot.writeBinary(_iter23.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TimUserBeanTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TimUserBeanTupleScheme getScheme() {
      return new TimUserBeanTupleScheme();
    }
  }

  private static class TimUserBeanTupleScheme extends org.apache.thrift.scheme.TupleScheme<TimUserBean> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TimUserBean struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetName()) {
        optionals.set(0);
      }
      if (struct.isSetNickName()) {
        optionals.set(1);
      }
      if (struct.isSetBrithday()) {
        optionals.set(2);
      }
      if (struct.isSetGender()) {
        optionals.set(3);
      }
      if (struct.isSetCover()) {
        optionals.set(4);
      }
      if (struct.isSetArea()) {
        optionals.set(5);
      }
      if (struct.isSetCreatetime()) {
        optionals.set(6);
      }
      if (struct.isSetPhotoTidAlbum()) {
        optionals.set(7);
      }
      if (struct.isSetExtend()) {
        optionals.set(8);
      }
      if (struct.isSetExtra()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetNickName()) {
        oprot.writeString(struct.nickName);
      }
      if (struct.isSetBrithday()) {
        oprot.writeString(struct.brithday);
      }
      if (struct.isSetGender()) {
        oprot.writeByte(struct.gender);
      }
      if (struct.isSetCover()) {
        oprot.writeString(struct.cover);
      }
      if (struct.isSetArea()) {
        oprot.writeString(struct.area);
      }
      if (struct.isSetCreatetime()) {
        oprot.writeI64(struct.createtime);
      }
      if (struct.isSetPhotoTidAlbum()) {
        {
          oprot.writeI32(struct.photoTidAlbum.size());
          for (java.lang.String _iter24 : struct.photoTidAlbum)
          {
            oprot.writeString(_iter24);
          }
        }
      }
      if (struct.isSetExtend()) {
        {
          oprot.writeI32(struct.extend.size());
          for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter25 : struct.extend.entrySet())
          {
            oprot.writeString(_iter25.getKey());
            oprot.writeString(_iter25.getValue());
          }
        }
      }
      if (struct.isSetExtra()) {
        {
          oprot.writeI32(struct.extra.size());
          for (java.util.Map.Entry<java.lang.String, java.nio.ByteBuffer> _iter26 : struct.extra.entrySet())
          {
            oprot.writeString(_iter26.getKey());
            oprot.writeBinary(_iter26.getValue());
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TimUserBean struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.nickName = iprot.readString();
        struct.setNickNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.brithday = iprot.readString();
        struct.setBrithdayIsSet(true);
      }
      if (incoming.get(3)) {
        struct.gender = iprot.readByte();
        struct.setGenderIsSet(true);
      }
      if (incoming.get(4)) {
        struct.cover = iprot.readString();
        struct.setCoverIsSet(true);
      }
      if (incoming.get(5)) {
        struct.area = iprot.readString();
        struct.setAreaIsSet(true);
      }
      if (incoming.get(6)) {
        struct.createtime = iprot.readI64();
        struct.setCreatetimeIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TList _list27 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
          struct.photoTidAlbum = new java.util.ArrayList<java.lang.String>(_list27.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _elem28;
          for (int _i29 = 0; _i29 < _list27.size; ++_i29)
          {
            _elem28 = iprot.readString();
            struct.photoTidAlbum.add(_elem28);
          }
        }
        struct.setPhotoTidAlbumIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TMap _map30 = iprot.readMapBegin(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING); 
          struct.extend = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map30.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _key31;
          @org.apache.thrift.annotation.Nullable java.lang.String _val32;
          for (int _i33 = 0; _i33 < _map30.size; ++_i33)
          {
            _key31 = iprot.readString();
            _val32 = iprot.readString();
            struct.extend.put(_key31, _val32);
          }
        }
        struct.setExtendIsSet(true);
      }
      if (incoming.get(9)) {
        {
          org.apache.thrift.protocol.TMap _map34 = iprot.readMapBegin(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING); 
          struct.extra = new java.util.HashMap<java.lang.String,java.nio.ByteBuffer>(2*_map34.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _key35;
          @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer _val36;
          for (int _i37 = 0; _i37 < _map34.size; ++_i37)
          {
            _key35 = iprot.readString();
            _val36 = iprot.readBinary();
            struct.extra.put(_key35, _val36);
          }
        }
        struct.setExtraIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

