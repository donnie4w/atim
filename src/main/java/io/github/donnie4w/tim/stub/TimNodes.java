/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package io.github.donnie4w.tim.stub;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.18.1)", date = "2023-12-03")
public class TimNodes implements org.apache.thrift.TBase<TimNodes, TimNodes._Fields>, java.io.Serializable, Cloneable, Comparable<TimNodes> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TimNodes");

  private static final org.apache.thrift.protocol.TField NTYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("ntype", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField NODELIST_FIELD_DESC = new org.apache.thrift.protocol.TField("nodelist", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField USERMAP_FIELD_DESC = new org.apache.thrift.protocol.TField("usermap", org.apache.thrift.protocol.TType.MAP, (short)3);
  private static final org.apache.thrift.protocol.TField ROOMMAP_FIELD_DESC = new org.apache.thrift.protocol.TField("roommap", org.apache.thrift.protocol.TType.MAP, (short)4);
  private static final org.apache.thrift.protocol.TField NODE_FIELD_DESC = new org.apache.thrift.protocol.TField("node", org.apache.thrift.protocol.TType.STRING, (short)5);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TimNodesStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TimNodesTupleSchemeFactory();

  public int ntype; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> nodelist; // optional
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,TimUserBean> usermap; // optional
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,TimRoomBean> roommap; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String node; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NTYPE((short)1, "ntype"),
    NODELIST((short)2, "nodelist"),
    USERMAP((short)3, "usermap"),
    ROOMMAP((short)4, "roommap"),
    NODE((short)5, "node");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NTYPE
          return NTYPE;
        case 2: // NODELIST
          return NODELIST;
        case 3: // USERMAP
          return USERMAP;
        case 4: // ROOMMAP
          return ROOMMAP;
        case 5: // NODE
          return NODE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __NTYPE_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.NODELIST,_Fields.USERMAP,_Fields.ROOMMAP,_Fields.NODE};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NTYPE, new org.apache.thrift.meta_data.FieldMetaData("ntype", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NODELIST, new org.apache.thrift.meta_data.FieldMetaData("nodelist", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.USERMAP, new org.apache.thrift.meta_data.FieldMetaData("usermap", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TimUserBean.class))));
    tmpMap.put(_Fields.ROOMMAP, new org.apache.thrift.meta_data.FieldMetaData("roommap", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TimRoomBean.class))));
    tmpMap.put(_Fields.NODE, new org.apache.thrift.meta_data.FieldMetaData("node", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TimNodes.class, metaDataMap);
  }

  public TimNodes() {
  }

  public TimNodes(
    int ntype)
  {
    this();
    this.ntype = ntype;
    setNtypeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TimNodes(TimNodes other) {
    __isset_bitfield = other.__isset_bitfield;
    this.ntype = other.ntype;
    if (other.isSetNodelist()) {
      java.util.List<java.lang.String> __this__nodelist = new java.util.ArrayList<java.lang.String>(other.nodelist);
      this.nodelist = __this__nodelist;
    }
    if (other.isSetUsermap()) {
      java.util.Map<java.lang.String,TimUserBean> __this__usermap = new java.util.HashMap<java.lang.String,TimUserBean>(other.usermap.size());
      for (java.util.Map.Entry<java.lang.String, TimUserBean> other_element : other.usermap.entrySet()) {

        java.lang.String other_element_key = other_element.getKey();
        TimUserBean other_element_value = other_element.getValue();

        java.lang.String __this__usermap_copy_key = other_element_key;

        TimUserBean __this__usermap_copy_value = new TimUserBean(other_element_value);

        __this__usermap.put(__this__usermap_copy_key, __this__usermap_copy_value);
      }
      this.usermap = __this__usermap;
    }
    if (other.isSetRoommap()) {
      java.util.Map<java.lang.String,TimRoomBean> __this__roommap = new java.util.HashMap<java.lang.String,TimRoomBean>(other.roommap.size());
      for (java.util.Map.Entry<java.lang.String, TimRoomBean> other_element : other.roommap.entrySet()) {

        java.lang.String other_element_key = other_element.getKey();
        TimRoomBean other_element_value = other_element.getValue();

        java.lang.String __this__roommap_copy_key = other_element_key;

        TimRoomBean __this__roommap_copy_value = new TimRoomBean(other_element_value);

        __this__roommap.put(__this__roommap_copy_key, __this__roommap_copy_value);
      }
      this.roommap = __this__roommap;
    }
    if (other.isSetNode()) {
      this.node = other.node;
    }
  }

  @Override
  public TimNodes deepCopy() {
    return new TimNodes(this);
  }

  @Override
  public void clear() {
    setNtypeIsSet(false);
    this.ntype = 0;
    this.nodelist = null;
    this.usermap = null;
    this.roommap = null;
    this.node = null;
  }

  public int getNtype() {
    return this.ntype;
  }

  public TimNodes setNtype(int ntype) {
    this.ntype = ntype;
    setNtypeIsSet(true);
    return this;
  }

  public void unsetNtype() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NTYPE_ISSET_ID);
  }

  /** Returns true if field ntype is set (has been assigned a value) and false otherwise */
  public boolean isSetNtype() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NTYPE_ISSET_ID);
  }

  public void setNtypeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NTYPE_ISSET_ID, value);
  }

  public int getNodelistSize() {
    return (this.nodelist == null) ? 0 : this.nodelist.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.String> getNodelistIterator() {
    return (this.nodelist == null) ? null : this.nodelist.iterator();
  }

  public void addToNodelist(java.lang.String elem) {
    if (this.nodelist == null) {
      this.nodelist = new java.util.ArrayList<java.lang.String>();
    }
    this.nodelist.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.String> getNodelist() {
    return this.nodelist;
  }

  public TimNodes setNodelist(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> nodelist) {
    this.nodelist = nodelist;
    return this;
  }

  public void unsetNodelist() {
    this.nodelist = null;
  }

  /** Returns true if field nodelist is set (has been assigned a value) and false otherwise */
  public boolean isSetNodelist() {
    return this.nodelist != null;
  }

  public void setNodelistIsSet(boolean value) {
    if (!value) {
      this.nodelist = null;
    }
  }

  public int getUsermapSize() {
    return (this.usermap == null) ? 0 : this.usermap.size();
  }

  public void putToUsermap(java.lang.String key, TimUserBean val) {
    if (this.usermap == null) {
      this.usermap = new java.util.HashMap<java.lang.String,TimUserBean>();
    }
    this.usermap.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.String,TimUserBean> getUsermap() {
    return this.usermap;
  }

  public TimNodes setUsermap(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,TimUserBean> usermap) {
    this.usermap = usermap;
    return this;
  }

  public void unsetUsermap() {
    this.usermap = null;
  }

  /** Returns true if field usermap is set (has been assigned a value) and false otherwise */
  public boolean isSetUsermap() {
    return this.usermap != null;
  }

  public void setUsermapIsSet(boolean value) {
    if (!value) {
      this.usermap = null;
    }
  }

  public int getRoommapSize() {
    return (this.roommap == null) ? 0 : this.roommap.size();
  }

  public void putToRoommap(java.lang.String key, TimRoomBean val) {
    if (this.roommap == null) {
      this.roommap = new java.util.HashMap<java.lang.String,TimRoomBean>();
    }
    this.roommap.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.String,TimRoomBean> getRoommap() {
    return this.roommap;
  }

  public TimNodes setRoommap(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,TimRoomBean> roommap) {
    this.roommap = roommap;
    return this;
  }

  public void unsetRoommap() {
    this.roommap = null;
  }

  /** Returns true if field roommap is set (has been assigned a value) and false otherwise */
  public boolean isSetRoommap() {
    return this.roommap != null;
  }

  public void setRoommapIsSet(boolean value) {
    if (!value) {
      this.roommap = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getNode() {
    return this.node;
  }

  public TimNodes setNode(@org.apache.thrift.annotation.Nullable java.lang.String node) {
    this.node = node;
    return this;
  }

  public void unsetNode() {
    this.node = null;
  }

  /** Returns true if field node is set (has been assigned a value) and false otherwise */
  public boolean isSetNode() {
    return this.node != null;
  }

  public void setNodeIsSet(boolean value) {
    if (!value) {
      this.node = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case NTYPE:
      if (value == null) {
        unsetNtype();
      } else {
        setNtype((java.lang.Integer)value);
      }
      break;

    case NODELIST:
      if (value == null) {
        unsetNodelist();
      } else {
        setNodelist((java.util.List<java.lang.String>)value);
      }
      break;

    case USERMAP:
      if (value == null) {
        unsetUsermap();
      } else {
        setUsermap((java.util.Map<java.lang.String,TimUserBean>)value);
      }
      break;

    case ROOMMAP:
      if (value == null) {
        unsetRoommap();
      } else {
        setRoommap((java.util.Map<java.lang.String,TimRoomBean>)value);
      }
      break;

    case NODE:
      if (value == null) {
        unsetNode();
      } else {
        setNode((java.lang.String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case NTYPE:
      return getNtype();

    case NODELIST:
      return getNodelist();

    case USERMAP:
      return getUsermap();

    case ROOMMAP:
      return getRoommap();

    case NODE:
      return getNode();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case NTYPE:
      return isSetNtype();
    case NODELIST:
      return isSetNodelist();
    case USERMAP:
      return isSetUsermap();
    case ROOMMAP:
      return isSetRoommap();
    case NODE:
      return isSetNode();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TimNodes)
      return this.equals((TimNodes)that);
    return false;
  }

  public boolean equals(TimNodes that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_ntype = true;
    boolean that_present_ntype = true;
    if (this_present_ntype || that_present_ntype) {
      if (!(this_present_ntype && that_present_ntype))
        return false;
      if (this.ntype != that.ntype)
        return false;
    }

    boolean this_present_nodelist = true && this.isSetNodelist();
    boolean that_present_nodelist = true && that.isSetNodelist();
    if (this_present_nodelist || that_present_nodelist) {
      if (!(this_present_nodelist && that_present_nodelist))
        return false;
      if (!this.nodelist.equals(that.nodelist))
        return false;
    }

    boolean this_present_usermap = true && this.isSetUsermap();
    boolean that_present_usermap = true && that.isSetUsermap();
    if (this_present_usermap || that_present_usermap) {
      if (!(this_present_usermap && that_present_usermap))
        return false;
      if (!this.usermap.equals(that.usermap))
        return false;
    }

    boolean this_present_roommap = true && this.isSetRoommap();
    boolean that_present_roommap = true && that.isSetRoommap();
    if (this_present_roommap || that_present_roommap) {
      if (!(this_present_roommap && that_present_roommap))
        return false;
      if (!this.roommap.equals(that.roommap))
        return false;
    }

    boolean this_present_node = true && this.isSetNode();
    boolean that_present_node = true && that.isSetNode();
    if (this_present_node || that_present_node) {
      if (!(this_present_node && that_present_node))
        return false;
      if (!this.node.equals(that.node))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ntype;

    hashCode = hashCode * 8191 + ((isSetNodelist()) ? 131071 : 524287);
    if (isSetNodelist())
      hashCode = hashCode * 8191 + nodelist.hashCode();

    hashCode = hashCode * 8191 + ((isSetUsermap()) ? 131071 : 524287);
    if (isSetUsermap())
      hashCode = hashCode * 8191 + usermap.hashCode();

    hashCode = hashCode * 8191 + ((isSetRoommap()) ? 131071 : 524287);
    if (isSetRoommap())
      hashCode = hashCode * 8191 + roommap.hashCode();

    hashCode = hashCode * 8191 + ((isSetNode()) ? 131071 : 524287);
    if (isSetNode())
      hashCode = hashCode * 8191 + node.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TimNodes other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetNtype(), other.isSetNtype());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNtype()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ntype, other.ntype);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetNodelist(), other.isSetNodelist());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNodelist()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nodelist, other.nodelist);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetUsermap(), other.isSetUsermap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUsermap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.usermap, other.usermap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetRoommap(), other.isSetRoommap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRoommap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.roommap, other.roommap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetNode(), other.isSetNode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.node, other.node);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TimNodes(");
    boolean first = true;

    sb.append("ntype:");
    sb.append(this.ntype);
    first = false;
    if (isSetNodelist()) {
      if (!first) sb.append(", ");
      sb.append("nodelist:");
      if (this.nodelist == null) {
        sb.append("null");
      } else {
        sb.append(this.nodelist);
      }
      first = false;
    }
    if (isSetUsermap()) {
      if (!first) sb.append(", ");
      sb.append("usermap:");
      if (this.usermap == null) {
        sb.append("null");
      } else {
        sb.append(this.usermap);
      }
      first = false;
    }
    if (isSetRoommap()) {
      if (!first) sb.append(", ");
      sb.append("roommap:");
      if (this.roommap == null) {
        sb.append("null");
      } else {
        sb.append(this.roommap);
      }
      first = false;
    }
    if (isSetNode()) {
      if (!first) sb.append(", ");
      sb.append("node:");
      if (this.node == null) {
        sb.append("null");
      } else {
        sb.append(this.node);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'ntype' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TimNodesStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TimNodesStandardScheme getScheme() {
      return new TimNodesStandardScheme();
    }
  }

  private static class TimNodesStandardScheme extends org.apache.thrift.scheme.StandardScheme<TimNodes> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TimNodes struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NTYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ntype = iprot.readI32();
              struct.setNtypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NODELIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list124 = iprot.readListBegin();
                struct.nodelist = new java.util.ArrayList<java.lang.String>(_list124.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _elem125;
                for (int _i126 = 0; _i126 < _list124.size; ++_i126)
                {
                  _elem125 = iprot.readString();
                  struct.nodelist.add(_elem125);
                }
                iprot.readListEnd();
              }
              struct.setNodelistIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // USERMAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map127 = iprot.readMapBegin();
                struct.usermap = new java.util.HashMap<java.lang.String,TimUserBean>(2*_map127.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _key128;
                @org.apache.thrift.annotation.Nullable TimUserBean _val129;
                for (int _i130 = 0; _i130 < _map127.size; ++_i130)
                {
                  _key128 = iprot.readString();
                  _val129 = new TimUserBean();
                  _val129.read(iprot);
                  struct.usermap.put(_key128, _val129);
                }
                iprot.readMapEnd();
              }
              struct.setUsermapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ROOMMAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map131 = iprot.readMapBegin();
                struct.roommap = new java.util.HashMap<java.lang.String,TimRoomBean>(2*_map131.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _key132;
                @org.apache.thrift.annotation.Nullable TimRoomBean _val133;
                for (int _i134 = 0; _i134 < _map131.size; ++_i134)
                {
                  _key132 = iprot.readString();
                  _val133 = new TimRoomBean();
                  _val133.read(iprot);
                  struct.roommap.put(_key132, _val133);
                }
                iprot.readMapEnd();
              }
              struct.setRoommapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // NODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.node = iprot.readString();
              struct.setNodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetNtype()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'ntype' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TimNodes struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(NTYPE_FIELD_DESC);
      oprot.writeI32(struct.ntype);
      oprot.writeFieldEnd();
      if (struct.nodelist != null) {
        if (struct.isSetNodelist()) {
          oprot.writeFieldBegin(NODELIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.nodelist.size()));
            for (java.lang.String _iter135 : struct.nodelist)
            {
              oprot.writeString(_iter135);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.usermap != null) {
        if (struct.isSetUsermap()) {
          oprot.writeFieldBegin(USERMAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.usermap.size()));
            for (java.util.Map.Entry<java.lang.String, TimUserBean> _iter136 : struct.usermap.entrySet())
            {
              oprot.writeString(_iter136.getKey());
              _iter136.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.roommap != null) {
        if (struct.isSetRoommap()) {
          oprot.writeFieldBegin(ROOMMAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.roommap.size()));
            for (java.util.Map.Entry<java.lang.String, TimRoomBean> _iter137 : struct.roommap.entrySet())
            {
              oprot.writeString(_iter137.getKey());
              _iter137.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.node != null) {
        if (struct.isSetNode()) {
          oprot.writeFieldBegin(NODE_FIELD_DESC);
          oprot.writeString(struct.node);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TimNodesTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TimNodesTupleScheme getScheme() {
      return new TimNodesTupleScheme();
    }
  }

  private static class TimNodesTupleScheme extends org.apache.thrift.scheme.TupleScheme<TimNodes> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TimNodes struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI32(struct.ntype);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetNodelist()) {
        optionals.set(0);
      }
      if (struct.isSetUsermap()) {
        optionals.set(1);
      }
      if (struct.isSetRoommap()) {
        optionals.set(2);
      }
      if (struct.isSetNode()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetNodelist()) {
        {
          oprot.writeI32(struct.nodelist.size());
          for (java.lang.String _iter138 : struct.nodelist)
          {
            oprot.writeString(_iter138);
          }
        }
      }
      if (struct.isSetUsermap()) {
        {
          oprot.writeI32(struct.usermap.size());
          for (java.util.Map.Entry<java.lang.String, TimUserBean> _iter139 : struct.usermap.entrySet())
          {
            oprot.writeString(_iter139.getKey());
            _iter139.getValue().write(oprot);
          }
        }
      }
      if (struct.isSetRoommap()) {
        {
          oprot.writeI32(struct.roommap.size());
          for (java.util.Map.Entry<java.lang.String, TimRoomBean> _iter140 : struct.roommap.entrySet())
          {
            oprot.writeString(_iter140.getKey());
            _iter140.getValue().write(oprot);
          }
        }
      }
      if (struct.isSetNode()) {
        oprot.writeString(struct.node);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TimNodes struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.ntype = iprot.readI32();
      struct.setNtypeIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list141 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
          struct.nodelist = new java.util.ArrayList<java.lang.String>(_list141.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _elem142;
          for (int _i143 = 0; _i143 < _list141.size; ++_i143)
          {
            _elem142 = iprot.readString();
            struct.nodelist.add(_elem142);
          }
        }
        struct.setNodelistIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TMap _map144 = iprot.readMapBegin(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT); 
          struct.usermap = new java.util.HashMap<java.lang.String,TimUserBean>(2*_map144.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _key145;
          @org.apache.thrift.annotation.Nullable TimUserBean _val146;
          for (int _i147 = 0; _i147 < _map144.size; ++_i147)
          {
            _key145 = iprot.readString();
            _val146 = new TimUserBean();
            _val146.read(iprot);
            struct.usermap.put(_key145, _val146);
          }
        }
        struct.setUsermapIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TMap _map148 = iprot.readMapBegin(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT); 
          struct.roommap = new java.util.HashMap<java.lang.String,TimRoomBean>(2*_map148.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _key149;
          @org.apache.thrift.annotation.Nullable TimRoomBean _val150;
          for (int _i151 = 0; _i151 < _map148.size; ++_i151)
          {
            _key149 = iprot.readString();
            _val150 = new TimRoomBean();
            _val150.read(iprot);
            struct.roommap.put(_key149, _val150);
          }
        }
        struct.setRoommapIsSet(true);
      }
      if (incoming.get(3)) {
        struct.node = iprot.readString();
        struct.setNodeIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

