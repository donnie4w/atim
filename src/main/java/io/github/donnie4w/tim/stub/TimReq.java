/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package io.github.donnie4w.tim.stub;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.18.1)", date = "2023-12-03")
public class TimReq implements org.apache.thrift.TBase<TimReq, TimReq._Fields>, java.io.Serializable, Cloneable, Comparable<TimReq> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TimReq");

  private static final org.apache.thrift.protocol.TField RTYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("rtype", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField NODE_FIELD_DESC = new org.apache.thrift.protocol.TField("node", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField NODE2_FIELD_DESC = new org.apache.thrift.protocol.TField("node2", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField REQ_INT_FIELD_DESC = new org.apache.thrift.protocol.TField("reqInt", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField REQ_INT2_FIELD_DESC = new org.apache.thrift.protocol.TField("reqInt2", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField REQ_STR_FIELD_DESC = new org.apache.thrift.protocol.TField("reqStr", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField REQ_STR2_FIELD_DESC = new org.apache.thrift.protocol.TField("reqStr2", org.apache.thrift.protocol.TType.STRING, (short)7);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TimReqStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TimReqTupleSchemeFactory();

  public int rtype; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String node; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String node2; // optional
  public long reqInt; // optional
  public long reqInt2; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String reqStr; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String reqStr2; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    RTYPE((short)1, "rtype"),
    NODE((short)2, "node"),
    NODE2((short)3, "node2"),
    REQ_INT((short)4, "reqInt"),
    REQ_INT2((short)5, "reqInt2"),
    REQ_STR((short)6, "reqStr"),
    REQ_STR2((short)7, "reqStr2");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // RTYPE
          return RTYPE;
        case 2: // NODE
          return NODE;
        case 3: // NODE2
          return NODE2;
        case 4: // REQ_INT
          return REQ_INT;
        case 5: // REQ_INT2
          return REQ_INT2;
        case 6: // REQ_STR
          return REQ_STR;
        case 7: // REQ_STR2
          return REQ_STR2;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __RTYPE_ISSET_ID = 0;
  private static final int __REQINT_ISSET_ID = 1;
  private static final int __REQINT2_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.RTYPE,_Fields.NODE,_Fields.NODE2,_Fields.REQ_INT,_Fields.REQ_INT2,_Fields.REQ_STR,_Fields.REQ_STR2};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.RTYPE, new org.apache.thrift.meta_data.FieldMetaData("rtype", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NODE, new org.apache.thrift.meta_data.FieldMetaData("node", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NODE2, new org.apache.thrift.meta_data.FieldMetaData("node2", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REQ_INT, new org.apache.thrift.meta_data.FieldMetaData("reqInt", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.REQ_INT2, new org.apache.thrift.meta_data.FieldMetaData("reqInt2", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.REQ_STR, new org.apache.thrift.meta_data.FieldMetaData("reqStr", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REQ_STR2, new org.apache.thrift.meta_data.FieldMetaData("reqStr2", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TimReq.class, metaDataMap);
  }

  public TimReq() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TimReq(TimReq other) {
    __isset_bitfield = other.__isset_bitfield;
    this.rtype = other.rtype;
    if (other.isSetNode()) {
      this.node = other.node;
    }
    if (other.isSetNode2()) {
      this.node2 = other.node2;
    }
    this.reqInt = other.reqInt;
    this.reqInt2 = other.reqInt2;
    if (other.isSetReqStr()) {
      this.reqStr = other.reqStr;
    }
    if (other.isSetReqStr2()) {
      this.reqStr2 = other.reqStr2;
    }
  }

  @Override
  public TimReq deepCopy() {
    return new TimReq(this);
  }

  @Override
  public void clear() {
    setRtypeIsSet(false);
    this.rtype = 0;
    this.node = null;
    this.node2 = null;
    setReqIntIsSet(false);
    this.reqInt = 0;
    setReqInt2IsSet(false);
    this.reqInt2 = 0;
    this.reqStr = null;
    this.reqStr2 = null;
  }

  public int getRtype() {
    return this.rtype;
  }

  public TimReq setRtype(int rtype) {
    this.rtype = rtype;
    setRtypeIsSet(true);
    return this;
  }

  public void unsetRtype() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RTYPE_ISSET_ID);
  }

  /** Returns true if field rtype is set (has been assigned a value) and false otherwise */
  public boolean isSetRtype() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RTYPE_ISSET_ID);
  }

  public void setRtypeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RTYPE_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getNode() {
    return this.node;
  }

  public TimReq setNode(@org.apache.thrift.annotation.Nullable java.lang.String node) {
    this.node = node;
    return this;
  }

  public void unsetNode() {
    this.node = null;
  }

  /** Returns true if field node is set (has been assigned a value) and false otherwise */
  public boolean isSetNode() {
    return this.node != null;
  }

  public void setNodeIsSet(boolean value) {
    if (!value) {
      this.node = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getNode2() {
    return this.node2;
  }

  public TimReq setNode2(@org.apache.thrift.annotation.Nullable java.lang.String node2) {
    this.node2 = node2;
    return this;
  }

  public void unsetNode2() {
    this.node2 = null;
  }

  /** Returns true if field node2 is set (has been assigned a value) and false otherwise */
  public boolean isSetNode2() {
    return this.node2 != null;
  }

  public void setNode2IsSet(boolean value) {
    if (!value) {
      this.node2 = null;
    }
  }

  public long getReqInt() {
    return this.reqInt;
  }

  public TimReq setReqInt(long reqInt) {
    this.reqInt = reqInt;
    setReqIntIsSet(true);
    return this;
  }

  public void unsetReqInt() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __REQINT_ISSET_ID);
  }

  /** Returns true if field reqInt is set (has been assigned a value) and false otherwise */
  public boolean isSetReqInt() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __REQINT_ISSET_ID);
  }

  public void setReqIntIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __REQINT_ISSET_ID, value);
  }

  public long getReqInt2() {
    return this.reqInt2;
  }

  public TimReq setReqInt2(long reqInt2) {
    this.reqInt2 = reqInt2;
    setReqInt2IsSet(true);
    return this;
  }

  public void unsetReqInt2() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __REQINT2_ISSET_ID);
  }

  /** Returns true if field reqInt2 is set (has been assigned a value) and false otherwise */
  public boolean isSetReqInt2() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __REQINT2_ISSET_ID);
  }

  public void setReqInt2IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __REQINT2_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getReqStr() {
    return this.reqStr;
  }

  public TimReq setReqStr(@org.apache.thrift.annotation.Nullable java.lang.String reqStr) {
    this.reqStr = reqStr;
    return this;
  }

  public void unsetReqStr() {
    this.reqStr = null;
  }

  /** Returns true if field reqStr is set (has been assigned a value) and false otherwise */
  public boolean isSetReqStr() {
    return this.reqStr != null;
  }

  public void setReqStrIsSet(boolean value) {
    if (!value) {
      this.reqStr = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getReqStr2() {
    return this.reqStr2;
  }

  public TimReq setReqStr2(@org.apache.thrift.annotation.Nullable java.lang.String reqStr2) {
    this.reqStr2 = reqStr2;
    return this;
  }

  public void unsetReqStr2() {
    this.reqStr2 = null;
  }

  /** Returns true if field reqStr2 is set (has been assigned a value) and false otherwise */
  public boolean isSetReqStr2() {
    return this.reqStr2 != null;
  }

  public void setReqStr2IsSet(boolean value) {
    if (!value) {
      this.reqStr2 = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case RTYPE:
      if (value == null) {
        unsetRtype();
      } else {
        setRtype((java.lang.Integer)value);
      }
      break;

    case NODE:
      if (value == null) {
        unsetNode();
      } else {
        setNode((java.lang.String)value);
      }
      break;

    case NODE2:
      if (value == null) {
        unsetNode2();
      } else {
        setNode2((java.lang.String)value);
      }
      break;

    case REQ_INT:
      if (value == null) {
        unsetReqInt();
      } else {
        setReqInt((java.lang.Long)value);
      }
      break;

    case REQ_INT2:
      if (value == null) {
        unsetReqInt2();
      } else {
        setReqInt2((java.lang.Long)value);
      }
      break;

    case REQ_STR:
      if (value == null) {
        unsetReqStr();
      } else {
        setReqStr((java.lang.String)value);
      }
      break;

    case REQ_STR2:
      if (value == null) {
        unsetReqStr2();
      } else {
        setReqStr2((java.lang.String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case RTYPE:
      return getRtype();

    case NODE:
      return getNode();

    case NODE2:
      return getNode2();

    case REQ_INT:
      return getReqInt();

    case REQ_INT2:
      return getReqInt2();

    case REQ_STR:
      return getReqStr();

    case REQ_STR2:
      return getReqStr2();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case RTYPE:
      return isSetRtype();
    case NODE:
      return isSetNode();
    case NODE2:
      return isSetNode2();
    case REQ_INT:
      return isSetReqInt();
    case REQ_INT2:
      return isSetReqInt2();
    case REQ_STR:
      return isSetReqStr();
    case REQ_STR2:
      return isSetReqStr2();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TimReq)
      return this.equals((TimReq)that);
    return false;
  }

  public boolean equals(TimReq that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_rtype = true && this.isSetRtype();
    boolean that_present_rtype = true && that.isSetRtype();
    if (this_present_rtype || that_present_rtype) {
      if (!(this_present_rtype && that_present_rtype))
        return false;
      if (this.rtype != that.rtype)
        return false;
    }

    boolean this_present_node = true && this.isSetNode();
    boolean that_present_node = true && that.isSetNode();
    if (this_present_node || that_present_node) {
      if (!(this_present_node && that_present_node))
        return false;
      if (!this.node.equals(that.node))
        return false;
    }

    boolean this_present_node2 = true && this.isSetNode2();
    boolean that_present_node2 = true && that.isSetNode2();
    if (this_present_node2 || that_present_node2) {
      if (!(this_present_node2 && that_present_node2))
        return false;
      if (!this.node2.equals(that.node2))
        return false;
    }

    boolean this_present_reqInt = true && this.isSetReqInt();
    boolean that_present_reqInt = true && that.isSetReqInt();
    if (this_present_reqInt || that_present_reqInt) {
      if (!(this_present_reqInt && that_present_reqInt))
        return false;
      if (this.reqInt != that.reqInt)
        return false;
    }

    boolean this_present_reqInt2 = true && this.isSetReqInt2();
    boolean that_present_reqInt2 = true && that.isSetReqInt2();
    if (this_present_reqInt2 || that_present_reqInt2) {
      if (!(this_present_reqInt2 && that_present_reqInt2))
        return false;
      if (this.reqInt2 != that.reqInt2)
        return false;
    }

    boolean this_present_reqStr = true && this.isSetReqStr();
    boolean that_present_reqStr = true && that.isSetReqStr();
    if (this_present_reqStr || that_present_reqStr) {
      if (!(this_present_reqStr && that_present_reqStr))
        return false;
      if (!this.reqStr.equals(that.reqStr))
        return false;
    }

    boolean this_present_reqStr2 = true && this.isSetReqStr2();
    boolean that_present_reqStr2 = true && that.isSetReqStr2();
    if (this_present_reqStr2 || that_present_reqStr2) {
      if (!(this_present_reqStr2 && that_present_reqStr2))
        return false;
      if (!this.reqStr2.equals(that.reqStr2))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetRtype()) ? 131071 : 524287);
    if (isSetRtype())
      hashCode = hashCode * 8191 + rtype;

    hashCode = hashCode * 8191 + ((isSetNode()) ? 131071 : 524287);
    if (isSetNode())
      hashCode = hashCode * 8191 + node.hashCode();

    hashCode = hashCode * 8191 + ((isSetNode2()) ? 131071 : 524287);
    if (isSetNode2())
      hashCode = hashCode * 8191 + node2.hashCode();

    hashCode = hashCode * 8191 + ((isSetReqInt()) ? 131071 : 524287);
    if (isSetReqInt())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(reqInt);

    hashCode = hashCode * 8191 + ((isSetReqInt2()) ? 131071 : 524287);
    if (isSetReqInt2())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(reqInt2);

    hashCode = hashCode * 8191 + ((isSetReqStr()) ? 131071 : 524287);
    if (isSetReqStr())
      hashCode = hashCode * 8191 + reqStr.hashCode();

    hashCode = hashCode * 8191 + ((isSetReqStr2()) ? 131071 : 524287);
    if (isSetReqStr2())
      hashCode = hashCode * 8191 + reqStr2.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TimReq other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetRtype(), other.isSetRtype());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRtype()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rtype, other.rtype);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetNode(), other.isSetNode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.node, other.node);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetNode2(), other.isSetNode2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNode2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.node2, other.node2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetReqInt(), other.isSetReqInt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReqInt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reqInt, other.reqInt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetReqInt2(), other.isSetReqInt2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReqInt2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reqInt2, other.reqInt2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetReqStr(), other.isSetReqStr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReqStr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reqStr, other.reqStr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetReqStr2(), other.isSetReqStr2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReqStr2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reqStr2, other.reqStr2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TimReq(");
    boolean first = true;

    if (isSetRtype()) {
      sb.append("rtype:");
      sb.append(this.rtype);
      first = false;
    }
    if (isSetNode()) {
      if (!first) sb.append(", ");
      sb.append("node:");
      if (this.node == null) {
        sb.append("null");
      } else {
        sb.append(this.node);
      }
      first = false;
    }
    if (isSetNode2()) {
      if (!first) sb.append(", ");
      sb.append("node2:");
      if (this.node2 == null) {
        sb.append("null");
      } else {
        sb.append(this.node2);
      }
      first = false;
    }
    if (isSetReqInt()) {
      if (!first) sb.append(", ");
      sb.append("reqInt:");
      sb.append(this.reqInt);
      first = false;
    }
    if (isSetReqInt2()) {
      if (!first) sb.append(", ");
      sb.append("reqInt2:");
      sb.append(this.reqInt2);
      first = false;
    }
    if (isSetReqStr()) {
      if (!first) sb.append(", ");
      sb.append("reqStr:");
      if (this.reqStr == null) {
        sb.append("null");
      } else {
        sb.append(this.reqStr);
      }
      first = false;
    }
    if (isSetReqStr2()) {
      if (!first) sb.append(", ");
      sb.append("reqStr2:");
      if (this.reqStr2 == null) {
        sb.append("null");
      } else {
        sb.append(this.reqStr2);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TimReqStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TimReqStandardScheme getScheme() {
      return new TimReqStandardScheme();
    }
  }

  private static class TimReqStandardScheme extends org.apache.thrift.scheme.StandardScheme<TimReq> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TimReq struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // RTYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rtype = iprot.readI32();
              struct.setRtypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.node = iprot.readString();
              struct.setNodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NODE2
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.node2 = iprot.readString();
              struct.setNode2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // REQ_INT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.reqInt = iprot.readI64();
              struct.setReqIntIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // REQ_INT2
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.reqInt2 = iprot.readI64();
              struct.setReqInt2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // REQ_STR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.reqStr = iprot.readString();
              struct.setReqStrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // REQ_STR2
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.reqStr2 = iprot.readString();
              struct.setReqStr2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TimReq struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetRtype()) {
        oprot.writeFieldBegin(RTYPE_FIELD_DESC);
        oprot.writeI32(struct.rtype);
        oprot.writeFieldEnd();
      }
      if (struct.node != null) {
        if (struct.isSetNode()) {
          oprot.writeFieldBegin(NODE_FIELD_DESC);
          oprot.writeString(struct.node);
          oprot.writeFieldEnd();
        }
      }
      if (struct.node2 != null) {
        if (struct.isSetNode2()) {
          oprot.writeFieldBegin(NODE2_FIELD_DESC);
          oprot.writeString(struct.node2);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetReqInt()) {
        oprot.writeFieldBegin(REQ_INT_FIELD_DESC);
        oprot.writeI64(struct.reqInt);
        oprot.writeFieldEnd();
      }
      if (struct.isSetReqInt2()) {
        oprot.writeFieldBegin(REQ_INT2_FIELD_DESC);
        oprot.writeI64(struct.reqInt2);
        oprot.writeFieldEnd();
      }
      if (struct.reqStr != null) {
        if (struct.isSetReqStr()) {
          oprot.writeFieldBegin(REQ_STR_FIELD_DESC);
          oprot.writeString(struct.reqStr);
          oprot.writeFieldEnd();
        }
      }
      if (struct.reqStr2 != null) {
        if (struct.isSetReqStr2()) {
          oprot.writeFieldBegin(REQ_STR2_FIELD_DESC);
          oprot.writeString(struct.reqStr2);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TimReqTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TimReqTupleScheme getScheme() {
      return new TimReqTupleScheme();
    }
  }

  private static class TimReqTupleScheme extends org.apache.thrift.scheme.TupleScheme<TimReq> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TimReq struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetRtype()) {
        optionals.set(0);
      }
      if (struct.isSetNode()) {
        optionals.set(1);
      }
      if (struct.isSetNode2()) {
        optionals.set(2);
      }
      if (struct.isSetReqInt()) {
        optionals.set(3);
      }
      if (struct.isSetReqInt2()) {
        optionals.set(4);
      }
      if (struct.isSetReqStr()) {
        optionals.set(5);
      }
      if (struct.isSetReqStr2()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetRtype()) {
        oprot.writeI32(struct.rtype);
      }
      if (struct.isSetNode()) {
        oprot.writeString(struct.node);
      }
      if (struct.isSetNode2()) {
        oprot.writeString(struct.node2);
      }
      if (struct.isSetReqInt()) {
        oprot.writeI64(struct.reqInt);
      }
      if (struct.isSetReqInt2()) {
        oprot.writeI64(struct.reqInt2);
      }
      if (struct.isSetReqStr()) {
        oprot.writeString(struct.reqStr);
      }
      if (struct.isSetReqStr2()) {
        oprot.writeString(struct.reqStr2);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TimReq struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.rtype = iprot.readI32();
        struct.setRtypeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.node = iprot.readString();
        struct.setNodeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.node2 = iprot.readString();
        struct.setNode2IsSet(true);
      }
      if (incoming.get(3)) {
        struct.reqInt = iprot.readI64();
        struct.setReqIntIsSet(true);
      }
      if (incoming.get(4)) {
        struct.reqInt2 = iprot.readI64();
        struct.setReqInt2IsSet(true);
      }
      if (incoming.get(5)) {
        struct.reqStr = iprot.readString();
        struct.setReqStrIsSet(true);
      }
      if (incoming.get(6)) {
        struct.reqStr2 = iprot.readString();
        struct.setReqStr2IsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

